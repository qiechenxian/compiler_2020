Terminals unused in grammar

   CHAR
   SWITCH
   CASE
   COLON
   STRING
   CHARACTER


State 171 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: CompUnit

    2 CompUnit: CompUnit Decl
    3         | CompUnit FuncDef
    4         | Decl
    5         | FuncDef

    6 Decl: ConstDecl
    7     | VarDecl

    8 ConstDecl: CONST BType ConstDefList SEMICOLON

    9 ConstDefList: ConstDefList COMMA ConstDef
   10             | ConstDef

   11 BType: INT

   12 ConstDef: Ident ASSIGNMENT ConstExp
   13         | Ident ConstSubscripts ASSIGNMENT ConstInitVal

   14 ConstSubscripts: ConstSubscripts L_BRACKETS ConstExp R_BRACKETS
   15                | L_BRACKETS ConstExp R_BRACKETS

   16 ConstInitVal: L_BRACE ConstInitValList R_BRACE
   17             | L_BRACE R_BRACE

   18 ConstInitValList: ConstInitValList COMMA ConstInitVal
   19                 | ConstInitValList COMMA ConstExp
   20                 | ConstInitVal
   21                 | ConstExp

   22 VarDecl: BType VarDefList SEMICOLON

   23 VarDefList: VarDefList COMMA VarDef
   24           | VarDef

   25 VarDef: Ident
   26       | Ident ASSIGNMENT Exp
   27       | Ident ConstSubscripts
   28       | Ident ConstSubscripts ASSIGNMENT InitVal

   29 InitVal: L_BRACE InitValList R_BRACE
   30        | L_BRACE R_BRACE

   31 InitValList: InitValList COMMA Exp
   32            | InitValList COMMA InitVal
   33            | Exp
   34            | InitVal

   35 FuncDef: VOID Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   36        | VOID Ident L_PARENTHESIS R_PARENTHESIS Block
   37        | BType Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   38        | BType Ident L_PARENTHESIS R_PARENTHESIS Block

   39 FuncFParams: FuncFParams COMMA FuncFParam
   40            | FuncFParam

   41 FuncFParam: BType Ident
   42           | BType Ident ExpSubscripts

   43 ExpSubscripts: ExpSubscripts L_BRACKETS Exp R_BRACKETS
   44              | L_BRACKETS R_BRACKETS
   45              | L_BRACKETS Exp R_BRACKETS

   46 Block: L_BRACE BlockItem R_BRACE
   47      | L_BRACE R_BRACE

   48 BlockItem: BlockItem Decl
   49          | BlockItem Stmt
   50          | Decl
   51          | Stmt

   52 Stmt: LVal ASSIGNMENT Exp SEMICOLON
   53     | Exp SEMICOLON
   54     | SEMICOLON
   55     | Block
   56     | IF L_PARENTHESIS Cond R_PARENTHESIS Stmt
   57     | IF L_PARENTHESIS Cond R_PARENTHESIS Stmt ELSE Stmt
   58     | WHILE L_PARENTHESIS Cond R_PARENTHESIS Stmt
   59     | BREAK SEMICOLON
   60     | CONTINUE SEMICOLON
   61     | RETURN Exp SEMICOLON
   62     | RETURN SEMICOLON

   63 FuncRParams: FuncRParams COMMA Exp
   64            | Exp

   65 LVal: Ident
   66     | LVal L_BRACKETS Exp R_BRACKETS

   67 Cond: Exp RelOp Exp
   68     | L_PARENTHESIS Cond R_PARENTHESIS
   69     | NOT Cond
   70     | Cond AND Cond
   71     | Cond OR Cond

   72 RelOp: EQ
   73      | NE
   74      | LT
   75      | LE
   76      | GT
   77      | GE

   78 addOp: ADD
   79      | SUB

   80 mulOp: MUL
   81      | DIV
   82      | MOD

   83 UnaryOp: ADD
   84        | SUB

   85 Exp: Exp addOp Exp
   86    | Exp mulOp Exp
   87    | UnaryOp Exp
   88    | L_PARENTHESIS Exp R_PARENTHESIS
   89    | LVal
   90    | Ident L_PARENTHESIS FuncRParams R_PARENTHESIS
   91    | Ident L_PARENTHESIS R_PARENTHESIS
   92    | Number

   93 ConstExp: Exp

   94 Number: INTEGER

   95 Ident: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
ADD (258) 78 83
SUB (259) 79 84
MUL (260) 80
DIV (261) 81
MOD (262) 82
LT (263) 74
LE (264) 75
GT (265) 76
GE (266) 77
NOT (267) 69
AND (268) 70
OR (269) 71
EQ (270) 72
NE (271) 73
ASSIGNMENT (272) 12 13 26 28 52
CONST (273) 8
INT (274) 11
CHAR (275)
VOID (276) 35 36
IF (277) 56 57
ELSE (278) 57
WHILE (279) 58
SWITCH (280)
CASE (281)
RETURN (282) 61 62
BREAK (283) 59
CONTINUE (284) 60
COMMA (285) 9 18 19 23 31 32 39 63
SEMICOLON (286) 8 22 52 53 54 59 60 61 62
COLON (287)
L_PARENTHESIS (288) 35 36 37 38 56 57 58 68 88 90 91
R_PARENTHESIS (289) 35 36 37 38 56 57 58 68 88 90 91
L_BRACKETS (290) 14 15 43 44 45 66
R_BRACKETS (291) 14 15 43 44 45 66
L_BRACE (292) 16 17 29 30 46 47
R_BRACE (293) 16 17 29 30 46 47
ID (294) 95
INTEGER (295) 94
STRING (296)
CHARACTER (297)
UAddOp (298)
UMulOp (299)
UUnary (300)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
CompUnit (48)
    on left: 2 3 4 5, on right: 1 2 3
Decl (49)
    on left: 6 7, on right: 2 4 48 50
ConstDecl (50)
    on left: 8, on right: 6
ConstDefList (51)
    on left: 9 10, on right: 8 9
BType (52)
    on left: 11, on right: 8 22 37 38 41 42
ConstDef (53)
    on left: 12 13, on right: 9 10
ConstSubscripts (54)
    on left: 14 15, on right: 13 14 27 28
ConstInitVal (55)
    on left: 16 17, on right: 13 18 20
ConstInitValList (56)
    on left: 18 19 20 21, on right: 16 18 19
VarDecl (57)
    on left: 22, on right: 7
VarDefList (58)
    on left: 23 24, on right: 22 23
VarDef (59)
    on left: 25 26 27 28, on right: 23 24
InitVal (60)
    on left: 29 30, on right: 28 32 34
InitValList (61)
    on left: 31 32 33 34, on right: 29 31 32
FuncDef (62)
    on left: 35 36 37 38, on right: 3 5
FuncFParams (63)
    on left: 39 40, on right: 35 37 39
FuncFParam (64)
    on left: 41 42, on right: 39 40
ExpSubscripts (65)
    on left: 43 44 45, on right: 42 43
Block (66)
    on left: 46 47, on right: 35 36 37 38 55
BlockItem (67)
    on left: 48 49 50 51, on right: 46 48 49
Stmt (68)
    on left: 52 53 54 55 56 57 58 59 60 61 62, on right: 49 51 56 57
    58
FuncRParams (69)
    on left: 63 64, on right: 63 90
LVal (70)
    on left: 65 66, on right: 52 66 89
Cond (71)
    on left: 67 68 69 70 71, on right: 56 57 58 68 69 70 71
RelOp (72)
    on left: 72 73 74 75 76 77, on right: 67
addOp (73)
    on left: 78 79, on right: 85
mulOp (74)
    on left: 80 81 82, on right: 86
UnaryOp (75)
    on left: 83 84, on right: 87
Exp (76)
    on left: 85 86 87 88 89 90 91 92, on right: 26 31 33 43 45 52 53
    61 63 64 66 67 85 86 87 88 93
ConstExp (77)
    on left: 93, on right: 12 14 15 19 21
Number (78)
    on left: 94, on right: 92
Ident (79)
    on left: 95, on right: 12 13 25 26 27 28 35 36 37 38 41 42 65 90
    91


state 0

    0 $accept: . program $end

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    program    go to state 4
    CompUnit   go to state 5
    Decl       go to state 6
    ConstDecl  go to state 7
    BType      go to state 8
    VarDecl    go to state 9
    FuncDef    go to state 10


state 1

    8 ConstDecl: CONST . BType ConstDefList SEMICOLON

    INT  shift, and go to state 2

    BType  go to state 11


state 2

   11 BType: INT .

    $default  reduce using rule 11 (BType)


state 3

   35 FuncDef: VOID . Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   36        | VOID . Ident L_PARENTHESIS R_PARENTHESIS Block

    ID  shift, and go to state 12

    Ident  go to state 13


state 4

    0 $accept: program . $end

    $end  shift, and go to state 14


state 5

    1 program: CompUnit .
    2 CompUnit: CompUnit . Decl
    3         | CompUnit . FuncDef

    CONST  shift, and go to state 1
    INT    shift, and go to state 2
    VOID   shift, and go to state 3

    $default  reduce using rule 1 (program)

    Decl       go to state 15
    ConstDecl  go to state 7
    BType      go to state 8
    VarDecl    go to state 9
    FuncDef    go to state 16


state 6

    4 CompUnit: Decl .

    $default  reduce using rule 4 (CompUnit)


state 7

    6 Decl: ConstDecl .

    $default  reduce using rule 6 (Decl)


state 8

   22 VarDecl: BType . VarDefList SEMICOLON
   37 FuncDef: BType . Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   38        | BType . Ident L_PARENTHESIS R_PARENTHESIS Block

    ID  shift, and go to state 12

    VarDefList  go to state 17
    VarDef      go to state 18
    Ident       go to state 19


state 9

    7 Decl: VarDecl .

    $default  reduce using rule 7 (Decl)


state 10

    5 CompUnit: FuncDef .

    $default  reduce using rule 5 (CompUnit)


state 11

    8 ConstDecl: CONST BType . ConstDefList SEMICOLON

    ID  shift, and go to state 12

    ConstDefList  go to state 20
    ConstDef      go to state 21
    Ident         go to state 22


state 12

   95 Ident: ID .

    $default  reduce using rule 95 (Ident)


state 13

   35 FuncDef: VOID Ident . L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   36        | VOID Ident . L_PARENTHESIS R_PARENTHESIS Block

    L_PARENTHESIS  shift, and go to state 23


state 14

    0 $accept: program $end .

    $default  accept


state 15

    2 CompUnit: CompUnit Decl .

    $default  reduce using rule 2 (CompUnit)


state 16

    3 CompUnit: CompUnit FuncDef .

    $default  reduce using rule 3 (CompUnit)


state 17

   22 VarDecl: BType VarDefList . SEMICOLON
   23 VarDefList: VarDefList . COMMA VarDef

    COMMA      shift, and go to state 24
    SEMICOLON  shift, and go to state 25


state 18

   24 VarDefList: VarDef .

    $default  reduce using rule 24 (VarDefList)


state 19

   25 VarDef: Ident .
   26       | Ident . ASSIGNMENT Exp
   27       | Ident . ConstSubscripts
   28       | Ident . ConstSubscripts ASSIGNMENT InitVal
   37 FuncDef: BType Ident . L_PARENTHESIS FuncFParams R_PARENTHESIS Block
   38        | BType Ident . L_PARENTHESIS R_PARENTHESIS Block

    ASSIGNMENT     shift, and go to state 26
    L_PARENTHESIS  shift, and go to state 27
    L_BRACKETS     shift, and go to state 28

    $default  reduce using rule 25 (VarDef)

    ConstSubscripts  go to state 29


state 20

    8 ConstDecl: CONST BType ConstDefList . SEMICOLON
    9 ConstDefList: ConstDefList . COMMA ConstDef

    COMMA      shift, and go to state 30
    SEMICOLON  shift, and go to state 31


state 21

   10 ConstDefList: ConstDef .

    $default  reduce using rule 10 (ConstDefList)


state 22

   12 ConstDef: Ident . ASSIGNMENT ConstExp
   13         | Ident . ConstSubscripts ASSIGNMENT ConstInitVal

    ASSIGNMENT  shift, and go to state 32
    L_BRACKETS  shift, and go to state 28

    ConstSubscripts  go to state 33


state 23

   35 FuncDef: VOID Ident L_PARENTHESIS . FuncFParams R_PARENTHESIS Block
   36        | VOID Ident L_PARENTHESIS . R_PARENTHESIS Block

    INT            shift, and go to state 2
    R_PARENTHESIS  shift, and go to state 34

    BType        go to state 35
    FuncFParams  go to state 36
    FuncFParam   go to state 37


state 24

   23 VarDefList: VarDefList COMMA . VarDef

    ID  shift, and go to state 12

    VarDef  go to state 38
    Ident   go to state 39


state 25

   22 VarDecl: BType VarDefList SEMICOLON .

    $default  reduce using rule 22 (VarDecl)


state 26

   26 VarDef: Ident ASSIGNMENT . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 46
    Number   go to state 47
    Ident    go to state 48


state 27

   37 FuncDef: BType Ident L_PARENTHESIS . FuncFParams R_PARENTHESIS Block
   38        | BType Ident L_PARENTHESIS . R_PARENTHESIS Block

    INT            shift, and go to state 2
    R_PARENTHESIS  shift, and go to state 49

    BType        go to state 35
    FuncFParams  go to state 50
    FuncFParam   go to state 37


state 28

   15 ConstSubscripts: L_BRACKETS . ConstExp R_BRACKETS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal      go to state 44
    UnaryOp   go to state 45
    Exp       go to state 51
    ConstExp  go to state 52
    Number    go to state 47
    Ident     go to state 48


state 29

   14 ConstSubscripts: ConstSubscripts . L_BRACKETS ConstExp R_BRACKETS
   27 VarDef: Ident ConstSubscripts .
   28       | Ident ConstSubscripts . ASSIGNMENT InitVal

    ASSIGNMENT  shift, and go to state 53
    L_BRACKETS  shift, and go to state 54

    $default  reduce using rule 27 (VarDef)


state 30

    9 ConstDefList: ConstDefList COMMA . ConstDef

    ID  shift, and go to state 12

    ConstDef  go to state 55
    Ident     go to state 22


state 31

    8 ConstDecl: CONST BType ConstDefList SEMICOLON .

    $default  reduce using rule 8 (ConstDecl)


state 32

   12 ConstDef: Ident ASSIGNMENT . ConstExp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal      go to state 44
    UnaryOp   go to state 45
    Exp       go to state 51
    ConstExp  go to state 56
    Number    go to state 47
    Ident     go to state 48


state 33

   13 ConstDef: Ident ConstSubscripts . ASSIGNMENT ConstInitVal
   14 ConstSubscripts: ConstSubscripts . L_BRACKETS ConstExp R_BRACKETS

    ASSIGNMENT  shift, and go to state 57
    L_BRACKETS  shift, and go to state 54


state 34

   36 FuncDef: VOID Ident L_PARENTHESIS R_PARENTHESIS . Block

    L_BRACE  shift, and go to state 58

    Block  go to state 59


state 35

   41 FuncFParam: BType . Ident
   42           | BType . Ident ExpSubscripts

    ID  shift, and go to state 12

    Ident  go to state 60


state 36

   35 FuncDef: VOID Ident L_PARENTHESIS FuncFParams . R_PARENTHESIS Block
   39 FuncFParams: FuncFParams . COMMA FuncFParam

    COMMA          shift, and go to state 61
    R_PARENTHESIS  shift, and go to state 62


state 37

   40 FuncFParams: FuncFParam .

    $default  reduce using rule 40 (FuncFParams)


state 38

   23 VarDefList: VarDefList COMMA VarDef .

    $default  reduce using rule 23 (VarDefList)


state 39

   25 VarDef: Ident .
   26       | Ident . ASSIGNMENT Exp
   27       | Ident . ConstSubscripts
   28       | Ident . ConstSubscripts ASSIGNMENT InitVal

    ASSIGNMENT  shift, and go to state 26
    L_BRACKETS  shift, and go to state 28

    $default  reduce using rule 25 (VarDef)

    ConstSubscripts  go to state 29


state 40

   83 UnaryOp: ADD .

    $default  reduce using rule 83 (UnaryOp)


state 41

   84 UnaryOp: SUB .

    $default  reduce using rule 84 (UnaryOp)


state 42

   88 Exp: L_PARENTHESIS . Exp R_PARENTHESIS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 63
    Number   go to state 47
    Ident    go to state 48


state 43

   94 Number: INTEGER .

    $default  reduce using rule 94 (Number)


state 44

   66 LVal: LVal . L_BRACKETS Exp R_BRACKETS
   89 Exp: LVal .

    L_BRACKETS  shift, and go to state 64

    $default  reduce using rule 89 (Exp)


state 45

   87 Exp: UnaryOp . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 65
    Number   go to state 47
    Ident    go to state 48


state 46

   26 VarDef: Ident ASSIGNMENT Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 26 (VarDef)

    addOp  go to state 71
    mulOp  go to state 72


state 47

   92 Exp: Number .

    $default  reduce using rule 92 (Exp)


state 48

   65 LVal: Ident .
   90 Exp: Ident . L_PARENTHESIS FuncRParams R_PARENTHESIS
   91    | Ident . L_PARENTHESIS R_PARENTHESIS

    L_PARENTHESIS  shift, and go to state 73

    $default  reduce using rule 65 (LVal)


state 49

   38 FuncDef: BType Ident L_PARENTHESIS R_PARENTHESIS . Block

    L_BRACE  shift, and go to state 58

    Block  go to state 74


state 50

   37 FuncDef: BType Ident L_PARENTHESIS FuncFParams . R_PARENTHESIS Block
   39 FuncFParams: FuncFParams . COMMA FuncFParam

    COMMA          shift, and go to state 61
    R_PARENTHESIS  shift, and go to state 75


state 51

   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp
   93 ConstExp: Exp .

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 93 (ConstExp)

    addOp  go to state 71
    mulOp  go to state 72


state 52

   15 ConstSubscripts: L_BRACKETS ConstExp . R_BRACKETS

    R_BRACKETS  shift, and go to state 76


state 53

   28 VarDef: Ident ConstSubscripts ASSIGNMENT . InitVal

    L_BRACE  shift, and go to state 77

    InitVal  go to state 78


state 54

   14 ConstSubscripts: ConstSubscripts L_BRACKETS . ConstExp R_BRACKETS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal      go to state 44
    UnaryOp   go to state 45
    Exp       go to state 51
    ConstExp  go to state 79
    Number    go to state 47
    Ident     go to state 48


state 55

    9 ConstDefList: ConstDefList COMMA ConstDef .

    $default  reduce using rule 9 (ConstDefList)


state 56

   12 ConstDef: Ident ASSIGNMENT ConstExp .

    $default  reduce using rule 12 (ConstDef)


state 57

   13 ConstDef: Ident ConstSubscripts ASSIGNMENT . ConstInitVal

    L_BRACE  shift, and go to state 80

    ConstInitVal  go to state 81


state 58

   46 Block: L_BRACE . BlockItem R_BRACE
   47      | L_BRACE . R_BRACE

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    CONST          shift, and go to state 1
    INT            shift, and go to state 2
    IF             shift, and go to state 82
    WHILE          shift, and go to state 83
    RETURN         shift, and go to state 84
    BREAK          shift, and go to state 85
    CONTINUE       shift, and go to state 86
    SEMICOLON      shift, and go to state 87
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 58
    R_BRACE        shift, and go to state 88
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    Decl       go to state 89
    ConstDecl  go to state 7
    BType      go to state 90
    VarDecl    go to state 9
    Block      go to state 91
    BlockItem  go to state 92
    Stmt       go to state 93
    LVal       go to state 94
    UnaryOp    go to state 45
    Exp        go to state 95
    Number     go to state 47
    Ident      go to state 48


state 59

   36 FuncDef: VOID Ident L_PARENTHESIS R_PARENTHESIS Block .

    $default  reduce using rule 36 (FuncDef)


state 60

   41 FuncFParam: BType Ident .
   42           | BType Ident . ExpSubscripts

    L_BRACKETS  shift, and go to state 96

    $default  reduce using rule 41 (FuncFParam)

    ExpSubscripts  go to state 97


state 61

   39 FuncFParams: FuncFParams COMMA . FuncFParam

    INT  shift, and go to state 2

    BType       go to state 35
    FuncFParam  go to state 98


state 62

   35 FuncDef: VOID Ident L_PARENTHESIS FuncFParams R_PARENTHESIS . Block

    L_BRACE  shift, and go to state 58

    Block  go to state 99


state 63

   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp
   88    | L_PARENTHESIS Exp . R_PARENTHESIS

    ADD            shift, and go to state 66
    SUB            shift, and go to state 67
    MUL            shift, and go to state 68
    DIV            shift, and go to state 69
    MOD            shift, and go to state 70
    R_PARENTHESIS  shift, and go to state 100

    addOp  go to state 71
    mulOp  go to state 72


state 64

   66 LVal: LVal L_BRACKETS . Exp R_BRACKETS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 101
    Number   go to state 47
    Ident    go to state 48


state 65

   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp
   87    | UnaryOp Exp .

    $default  reduce using rule 87 (Exp)

    addOp  go to state 71
    mulOp  go to state 72


state 66

   78 addOp: ADD .

    $default  reduce using rule 78 (addOp)


state 67

   79 addOp: SUB .

    $default  reduce using rule 79 (addOp)


state 68

   80 mulOp: MUL .

    $default  reduce using rule 80 (mulOp)


state 69

   81 mulOp: DIV .

    $default  reduce using rule 81 (mulOp)


state 70

   82 mulOp: MOD .

    $default  reduce using rule 82 (mulOp)


state 71

   85 Exp: Exp addOp . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 102
    Number   go to state 47
    Ident    go to state 48


state 72

   86 Exp: Exp mulOp . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 103
    Number   go to state 47
    Ident    go to state 48


state 73

   90 Exp: Ident L_PARENTHESIS . FuncRParams R_PARENTHESIS
   91    | Ident L_PARENTHESIS . R_PARENTHESIS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    R_PARENTHESIS  shift, and go to state 104
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    FuncRParams  go to state 105
    LVal         go to state 44
    UnaryOp      go to state 45
    Exp          go to state 106
    Number       go to state 47
    Ident        go to state 48


state 74

   38 FuncDef: BType Ident L_PARENTHESIS R_PARENTHESIS Block .

    $default  reduce using rule 38 (FuncDef)


state 75

   37 FuncDef: BType Ident L_PARENTHESIS FuncFParams R_PARENTHESIS . Block

    L_BRACE  shift, and go to state 58

    Block  go to state 107


state 76

   15 ConstSubscripts: L_BRACKETS ConstExp R_BRACKETS .

    $default  reduce using rule 15 (ConstSubscripts)


state 77

   29 InitVal: L_BRACE . InitValList R_BRACE
   30        | L_BRACE . R_BRACE

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 77
    R_BRACE        shift, and go to state 108
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    InitVal      go to state 109
    InitValList  go to state 110
    LVal         go to state 44
    UnaryOp      go to state 45
    Exp          go to state 111
    Number       go to state 47
    Ident        go to state 48


state 78

   28 VarDef: Ident ConstSubscripts ASSIGNMENT InitVal .

    $default  reduce using rule 28 (VarDef)


state 79

   14 ConstSubscripts: ConstSubscripts L_BRACKETS ConstExp . R_BRACKETS

    R_BRACKETS  shift, and go to state 112


state 80

   16 ConstInitVal: L_BRACE . ConstInitValList R_BRACE
   17             | L_BRACE . R_BRACE

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 80
    R_BRACE        shift, and go to state 113
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    ConstInitVal      go to state 114
    ConstInitValList  go to state 115
    LVal              go to state 44
    UnaryOp           go to state 45
    Exp               go to state 51
    ConstExp          go to state 116
    Number            go to state 47
    Ident             go to state 48


state 81

   13 ConstDef: Ident ConstSubscripts ASSIGNMENT ConstInitVal .

    $default  reduce using rule 13 (ConstDef)


state 82

   56 Stmt: IF . L_PARENTHESIS Cond R_PARENTHESIS Stmt
   57     | IF . L_PARENTHESIS Cond R_PARENTHESIS Stmt ELSE Stmt

    L_PARENTHESIS  shift, and go to state 117


state 83

   58 Stmt: WHILE . L_PARENTHESIS Cond R_PARENTHESIS Stmt

    L_PARENTHESIS  shift, and go to state 118


state 84

   61 Stmt: RETURN . Exp SEMICOLON
   62     | RETURN . SEMICOLON

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    SEMICOLON      shift, and go to state 119
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 120
    Number   go to state 47
    Ident    go to state 48


state 85

   59 Stmt: BREAK . SEMICOLON

    SEMICOLON  shift, and go to state 121


state 86

   60 Stmt: CONTINUE . SEMICOLON

    SEMICOLON  shift, and go to state 122


state 87

   54 Stmt: SEMICOLON .

    $default  reduce using rule 54 (Stmt)


state 88

   47 Block: L_BRACE R_BRACE .

    $default  reduce using rule 47 (Block)


state 89

   50 BlockItem: Decl .

    $default  reduce using rule 50 (BlockItem)


state 90

   22 VarDecl: BType . VarDefList SEMICOLON

    ID  shift, and go to state 12

    VarDefList  go to state 17
    VarDef      go to state 18
    Ident       go to state 39


state 91

   55 Stmt: Block .

    $default  reduce using rule 55 (Stmt)


state 92

   46 Block: L_BRACE BlockItem . R_BRACE
   48 BlockItem: BlockItem . Decl
   49          | BlockItem . Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    CONST          shift, and go to state 1
    INT            shift, and go to state 2
    IF             shift, and go to state 82
    WHILE          shift, and go to state 83
    RETURN         shift, and go to state 84
    BREAK          shift, and go to state 85
    CONTINUE       shift, and go to state 86
    SEMICOLON      shift, and go to state 87
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 58
    R_BRACE        shift, and go to state 123
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    Decl       go to state 124
    ConstDecl  go to state 7
    BType      go to state 90
    VarDecl    go to state 9
    Block      go to state 91
    Stmt       go to state 125
    LVal       go to state 94
    UnaryOp    go to state 45
    Exp        go to state 95
    Number     go to state 47
    Ident      go to state 48


state 93

   51 BlockItem: Stmt .

    $default  reduce using rule 51 (BlockItem)


state 94

   52 Stmt: LVal . ASSIGNMENT Exp SEMICOLON
   66 LVal: LVal . L_BRACKETS Exp R_BRACKETS
   89 Exp: LVal .

    ASSIGNMENT  shift, and go to state 126
    L_BRACKETS  shift, and go to state 64

    $default  reduce using rule 89 (Exp)


state 95

   53 Stmt: Exp . SEMICOLON
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD        shift, and go to state 66
    SUB        shift, and go to state 67
    MUL        shift, and go to state 68
    DIV        shift, and go to state 69
    MOD        shift, and go to state 70
    SEMICOLON  shift, and go to state 127

    addOp  go to state 71
    mulOp  go to state 72


state 96

   44 ExpSubscripts: L_BRACKETS . R_BRACKETS
   45              | L_BRACKETS . Exp R_BRACKETS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    R_BRACKETS     shift, and go to state 128
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 129
    Number   go to state 47
    Ident    go to state 48


state 97

   42 FuncFParam: BType Ident ExpSubscripts .
   43 ExpSubscripts: ExpSubscripts . L_BRACKETS Exp R_BRACKETS

    L_BRACKETS  shift, and go to state 130

    $default  reduce using rule 42 (FuncFParam)


state 98

   39 FuncFParams: FuncFParams COMMA FuncFParam .

    $default  reduce using rule 39 (FuncFParams)


state 99

   35 FuncDef: VOID Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block .

    $default  reduce using rule 35 (FuncDef)


state 100

   88 Exp: L_PARENTHESIS Exp R_PARENTHESIS .

    $default  reduce using rule 88 (Exp)


state 101

   66 LVal: LVal L_BRACKETS Exp . R_BRACKETS
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD         shift, and go to state 66
    SUB         shift, and go to state 67
    MUL         shift, and go to state 68
    DIV         shift, and go to state 69
    MOD         shift, and go to state 70
    R_BRACKETS  shift, and go to state 131

    addOp  go to state 71
    mulOp  go to state 72


state 102

   85 Exp: Exp . addOp Exp
   85    | Exp addOp Exp .
   86    | Exp . mulOp Exp

    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 85 (Exp)

    addOp  go to state 71
    mulOp  go to state 72


state 103

   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp
   86    | Exp mulOp Exp .

    $default  reduce using rule 86 (Exp)

    addOp  go to state 71
    mulOp  go to state 72


state 104

   91 Exp: Ident L_PARENTHESIS R_PARENTHESIS .

    $default  reduce using rule 91 (Exp)


state 105

   63 FuncRParams: FuncRParams . COMMA Exp
   90 Exp: Ident L_PARENTHESIS FuncRParams . R_PARENTHESIS

    COMMA          shift, and go to state 132
    R_PARENTHESIS  shift, and go to state 133


state 106

   64 FuncRParams: Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 64 (FuncRParams)

    addOp  go to state 71
    mulOp  go to state 72


state 107

   37 FuncDef: BType Ident L_PARENTHESIS FuncFParams R_PARENTHESIS Block .

    $default  reduce using rule 37 (FuncDef)


state 108

   30 InitVal: L_BRACE R_BRACE .

    $default  reduce using rule 30 (InitVal)


state 109

   34 InitValList: InitVal .

    $default  reduce using rule 34 (InitValList)


state 110

   29 InitVal: L_BRACE InitValList . R_BRACE
   31 InitValList: InitValList . COMMA Exp
   32            | InitValList . COMMA InitVal

    COMMA    shift, and go to state 134
    R_BRACE  shift, and go to state 135


state 111

   33 InitValList: Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 33 (InitValList)

    addOp  go to state 71
    mulOp  go to state 72


state 112

   14 ConstSubscripts: ConstSubscripts L_BRACKETS ConstExp R_BRACKETS .

    $default  reduce using rule 14 (ConstSubscripts)


state 113

   17 ConstInitVal: L_BRACE R_BRACE .

    $default  reduce using rule 17 (ConstInitVal)


state 114

   20 ConstInitValList: ConstInitVal .

    $default  reduce using rule 20 (ConstInitValList)


state 115

   16 ConstInitVal: L_BRACE ConstInitValList . R_BRACE
   18 ConstInitValList: ConstInitValList . COMMA ConstInitVal
   19                 | ConstInitValList . COMMA ConstExp

    COMMA    shift, and go to state 136
    R_BRACE  shift, and go to state 137


state 116

   21 ConstInitValList: ConstExp .

    $default  reduce using rule 21 (ConstInitValList)


state 117

   56 Stmt: IF L_PARENTHESIS . Cond R_PARENTHESIS Stmt
   57     | IF L_PARENTHESIS . Cond R_PARENTHESIS Stmt ELSE Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 140
    UnaryOp  go to state 45
    Exp      go to state 141
    Number   go to state 47
    Ident    go to state 48


state 118

   58 Stmt: WHILE L_PARENTHESIS . Cond R_PARENTHESIS Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 142
    UnaryOp  go to state 45
    Exp      go to state 141
    Number   go to state 47
    Ident    go to state 48


state 119

   62 Stmt: RETURN SEMICOLON .

    $default  reduce using rule 62 (Stmt)


state 120

   61 Stmt: RETURN Exp . SEMICOLON
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD        shift, and go to state 66
    SUB        shift, and go to state 67
    MUL        shift, and go to state 68
    DIV        shift, and go to state 69
    MOD        shift, and go to state 70
    SEMICOLON  shift, and go to state 143

    addOp  go to state 71
    mulOp  go to state 72


state 121

   59 Stmt: BREAK SEMICOLON .

    $default  reduce using rule 59 (Stmt)


state 122

   60 Stmt: CONTINUE SEMICOLON .

    $default  reduce using rule 60 (Stmt)


state 123

   46 Block: L_BRACE BlockItem R_BRACE .

    $default  reduce using rule 46 (Block)


state 124

   48 BlockItem: BlockItem Decl .

    $default  reduce using rule 48 (BlockItem)


state 125

   49 BlockItem: BlockItem Stmt .

    $default  reduce using rule 49 (BlockItem)


state 126

   52 Stmt: LVal ASSIGNMENT . Exp SEMICOLON

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 144
    Number   go to state 47
    Ident    go to state 48


state 127

   53 Stmt: Exp SEMICOLON .

    $default  reduce using rule 53 (Stmt)


state 128

   44 ExpSubscripts: L_BRACKETS R_BRACKETS .

    $default  reduce using rule 44 (ExpSubscripts)


state 129

   45 ExpSubscripts: L_BRACKETS Exp . R_BRACKETS
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD         shift, and go to state 66
    SUB         shift, and go to state 67
    MUL         shift, and go to state 68
    DIV         shift, and go to state 69
    MOD         shift, and go to state 70
    R_BRACKETS  shift, and go to state 145

    addOp  go to state 71
    mulOp  go to state 72


state 130

   43 ExpSubscripts: ExpSubscripts L_BRACKETS . Exp R_BRACKETS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 146
    Number   go to state 47
    Ident    go to state 48


state 131

   66 LVal: LVal L_BRACKETS Exp R_BRACKETS .

    $default  reduce using rule 66 (LVal)


state 132

   63 FuncRParams: FuncRParams COMMA . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 147
    Number   go to state 47
    Ident    go to state 48


state 133

   90 Exp: Ident L_PARENTHESIS FuncRParams R_PARENTHESIS .

    $default  reduce using rule 90 (Exp)


state 134

   31 InitValList: InitValList COMMA . Exp
   32            | InitValList COMMA . InitVal

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 77
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    InitVal  go to state 148
    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 149
    Number   go to state 47
    Ident    go to state 48


state 135

   29 InitVal: L_BRACE InitValList R_BRACE .

    $default  reduce using rule 29 (InitVal)


state 136

   18 ConstInitValList: ConstInitValList COMMA . ConstInitVal
   19                 | ConstInitValList COMMA . ConstExp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 80
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    ConstInitVal  go to state 150
    LVal          go to state 44
    UnaryOp       go to state 45
    Exp           go to state 51
    ConstExp      go to state 151
    Number        go to state 47
    Ident         go to state 48


state 137

   16 ConstInitVal: L_BRACE ConstInitValList R_BRACE .

    $default  reduce using rule 16 (ConstInitVal)


state 138

   69 Cond: NOT . Cond

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 152
    UnaryOp  go to state 45
    Exp      go to state 141
    Number   go to state 47
    Ident    go to state 48


state 139

   68 Cond: L_PARENTHESIS . Cond R_PARENTHESIS
   88 Exp: L_PARENTHESIS . Exp R_PARENTHESIS

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 153
    UnaryOp  go to state 45
    Exp      go to state 154
    Number   go to state 47
    Ident    go to state 48


state 140

   56 Stmt: IF L_PARENTHESIS Cond . R_PARENTHESIS Stmt
   57     | IF L_PARENTHESIS Cond . R_PARENTHESIS Stmt ELSE Stmt
   70 Cond: Cond . AND Cond
   71     | Cond . OR Cond

    AND            shift, and go to state 155
    OR             shift, and go to state 156
    R_PARENTHESIS  shift, and go to state 157


state 141

   67 Cond: Exp . RelOp Exp
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70
    LT   shift, and go to state 158
    LE   shift, and go to state 159
    GT   shift, and go to state 160
    GE   shift, and go to state 161
    EQ   shift, and go to state 162
    NE   shift, and go to state 163

    RelOp  go to state 164
    addOp  go to state 71
    mulOp  go to state 72


state 142

   58 Stmt: WHILE L_PARENTHESIS Cond . R_PARENTHESIS Stmt
   70 Cond: Cond . AND Cond
   71     | Cond . OR Cond

    AND            shift, and go to state 155
    OR             shift, and go to state 156
    R_PARENTHESIS  shift, and go to state 165


state 143

   61 Stmt: RETURN Exp SEMICOLON .

    $default  reduce using rule 61 (Stmt)


state 144

   52 Stmt: LVal ASSIGNMENT Exp . SEMICOLON
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD        shift, and go to state 66
    SUB        shift, and go to state 67
    MUL        shift, and go to state 68
    DIV        shift, and go to state 69
    MOD        shift, and go to state 70
    SEMICOLON  shift, and go to state 166

    addOp  go to state 71
    mulOp  go to state 72


state 145

   45 ExpSubscripts: L_BRACKETS Exp R_BRACKETS .

    $default  reduce using rule 45 (ExpSubscripts)


state 146

   43 ExpSubscripts: ExpSubscripts L_BRACKETS Exp . R_BRACKETS
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD         shift, and go to state 66
    SUB         shift, and go to state 67
    MUL         shift, and go to state 68
    DIV         shift, and go to state 69
    MOD         shift, and go to state 70
    R_BRACKETS  shift, and go to state 167

    addOp  go to state 71
    mulOp  go to state 72


state 147

   63 FuncRParams: FuncRParams COMMA Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 63 (FuncRParams)

    addOp  go to state 71
    mulOp  go to state 72


state 148

   32 InitValList: InitValList COMMA InitVal .

    $default  reduce using rule 32 (InitValList)


state 149

   31 InitValList: InitValList COMMA Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 31 (InitValList)

    addOp  go to state 71
    mulOp  go to state 72


state 150

   18 ConstInitValList: ConstInitValList COMMA ConstInitVal .

    $default  reduce using rule 18 (ConstInitValList)


state 151

   19 ConstInitValList: ConstInitValList COMMA ConstExp .

    $default  reduce using rule 19 (ConstInitValList)


state 152

   69 Cond: NOT Cond .
   70     | Cond . AND Cond
   71     | Cond . OR Cond

    $default  reduce using rule 69 (Cond)


state 153

   68 Cond: L_PARENTHESIS Cond . R_PARENTHESIS
   70     | Cond . AND Cond
   71     | Cond . OR Cond

    AND            shift, and go to state 155
    OR             shift, and go to state 156
    R_PARENTHESIS  shift, and go to state 168


state 154

   67 Cond: Exp . RelOp Exp
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp
   88    | L_PARENTHESIS Exp . R_PARENTHESIS

    ADD            shift, and go to state 66
    SUB            shift, and go to state 67
    MUL            shift, and go to state 68
    DIV            shift, and go to state 69
    MOD            shift, and go to state 70
    LT             shift, and go to state 158
    LE             shift, and go to state 159
    GT             shift, and go to state 160
    GE             shift, and go to state 161
    EQ             shift, and go to state 162
    NE             shift, and go to state 163
    R_PARENTHESIS  shift, and go to state 100

    RelOp  go to state 164
    addOp  go to state 71
    mulOp  go to state 72


state 155

   70 Cond: Cond AND . Cond

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 169
    UnaryOp  go to state 45
    Exp      go to state 141
    Number   go to state 47
    Ident    go to state 48


state 156

   71 Cond: Cond OR . Cond

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    NOT            shift, and go to state 138
    L_PARENTHESIS  shift, and go to state 139
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    Cond     go to state 170
    UnaryOp  go to state 45
    Exp      go to state 141
    Number   go to state 47
    Ident    go to state 48


state 157

   56 Stmt: IF L_PARENTHESIS Cond R_PARENTHESIS . Stmt
   57     | IF L_PARENTHESIS Cond R_PARENTHESIS . Stmt ELSE Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    IF             shift, and go to state 82
    WHILE          shift, and go to state 83
    RETURN         shift, and go to state 84
    BREAK          shift, and go to state 85
    CONTINUE       shift, and go to state 86
    SEMICOLON      shift, and go to state 87
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 58
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    Block    go to state 91
    Stmt     go to state 171
    LVal     go to state 94
    UnaryOp  go to state 45
    Exp      go to state 95
    Number   go to state 47
    Ident    go to state 48


state 158

   74 RelOp: LT .

    $default  reduce using rule 74 (RelOp)


state 159

   75 RelOp: LE .

    $default  reduce using rule 75 (RelOp)


state 160

   76 RelOp: GT .

    $default  reduce using rule 76 (RelOp)


state 161

   77 RelOp: GE .

    $default  reduce using rule 77 (RelOp)


state 162

   72 RelOp: EQ .

    $default  reduce using rule 72 (RelOp)


state 163

   73 RelOp: NE .

    $default  reduce using rule 73 (RelOp)


state 164

   67 Cond: Exp RelOp . Exp

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    L_PARENTHESIS  shift, and go to state 42
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    LVal     go to state 44
    UnaryOp  go to state 45
    Exp      go to state 172
    Number   go to state 47
    Ident    go to state 48


state 165

   58 Stmt: WHILE L_PARENTHESIS Cond R_PARENTHESIS . Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    IF             shift, and go to state 82
    WHILE          shift, and go to state 83
    RETURN         shift, and go to state 84
    BREAK          shift, and go to state 85
    CONTINUE       shift, and go to state 86
    SEMICOLON      shift, and go to state 87
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 58
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    Block    go to state 91
    Stmt     go to state 173
    LVal     go to state 94
    UnaryOp  go to state 45
    Exp      go to state 95
    Number   go to state 47
    Ident    go to state 48


state 166

   52 Stmt: LVal ASSIGNMENT Exp SEMICOLON .

    $default  reduce using rule 52 (Stmt)


state 167

   43 ExpSubscripts: ExpSubscripts L_BRACKETS Exp R_BRACKETS .

    $default  reduce using rule 43 (ExpSubscripts)


state 168

   68 Cond: L_PARENTHESIS Cond R_PARENTHESIS .

    $default  reduce using rule 68 (Cond)


state 169

   70 Cond: Cond . AND Cond
   70     | Cond AND Cond .
   71     | Cond . OR Cond

    $default  reduce using rule 70 (Cond)


state 170

   70 Cond: Cond . AND Cond
   71     | Cond . OR Cond
   71     | Cond OR Cond .

    AND  shift, and go to state 155

    $default  reduce using rule 71 (Cond)


state 171

   56 Stmt: IF L_PARENTHESIS Cond R_PARENTHESIS Stmt .
   57     | IF L_PARENTHESIS Cond R_PARENTHESIS Stmt . ELSE Stmt

    ELSE  shift, and go to state 174

    ELSE      [reduce using rule 56 (Stmt)]
    $default  reduce using rule 56 (Stmt)


state 172

   67 Cond: Exp RelOp Exp .
   85 Exp: Exp . addOp Exp
   86    | Exp . mulOp Exp

    ADD  shift, and go to state 66
    SUB  shift, and go to state 67
    MUL  shift, and go to state 68
    DIV  shift, and go to state 69
    MOD  shift, and go to state 70

    $default  reduce using rule 67 (Cond)

    addOp  go to state 71
    mulOp  go to state 72


state 173

   58 Stmt: WHILE L_PARENTHESIS Cond R_PARENTHESIS Stmt .

    $default  reduce using rule 58 (Stmt)


state 174

   57 Stmt: IF L_PARENTHESIS Cond R_PARENTHESIS Stmt ELSE . Stmt

    ADD            shift, and go to state 40
    SUB            shift, and go to state 41
    IF             shift, and go to state 82
    WHILE          shift, and go to state 83
    RETURN         shift, and go to state 84
    BREAK          shift, and go to state 85
    CONTINUE       shift, and go to state 86
    SEMICOLON      shift, and go to state 87
    L_PARENTHESIS  shift, and go to state 42
    L_BRACE        shift, and go to state 58
    ID             shift, and go to state 12
    INTEGER        shift, and go to state 43

    Block    go to state 91
    Stmt     go to state 175
    LVal     go to state 94
    UnaryOp  go to state 45
    Exp      go to state 95
    Number   go to state 47
    Ident    go to state 48


state 175

   57 Stmt: IF L_PARENTHESIS Cond R_PARENTHESIS Stmt ELSE Stmt .

    $default  reduce using rule 57 (Stmt)
