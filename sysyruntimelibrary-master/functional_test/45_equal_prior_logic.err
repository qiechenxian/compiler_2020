
before semantic ast:
 decList(
  functionDec(main,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       decList(
        variableDec(b,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(c,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(d,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(a),
           intExp(10))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(b),
            intExp(6))),
          comStmList(
           comStm(
            assignStm(
             simpleVar(c),
             intExp(4))),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(5))),
            comStmList(
             comStm(
              decList(
               variableDec(t,
                int,
                FALSE),
               decList()),),
             comStmList(
              comStm(
               ifStm(
                opExp(
                 or,
                 opExp(
                  eq,
                  opExp(
                   add,
                   varExp(
                    simpleVar(b)),
                   varExp(
                    simpleVar(c))),
                  varExp(
                   simpleVar(a))),
                 opExp(
                  ne,
                  varExp(
                   simpleVar(d)),
                  opExp(
                   dev,
                   varExp(
                    simpleVar(a)),
                   intExp(2)))),
                blockStm(
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(t),
                    opExp(
                     add,
                     varExp(
                      simpleVar(b)),
                     opExp(
                      mul,
                      opExp(
                       dev,
                       varExp(
                        simpleVar(c)),
                       varExp(
                        simpleVar(d))),
                      intExp(2))))),
                  comStmList(
                   comStm(
                    expStm(
                     callExp(putint,
                      expList(
                       varExp(
                        simpleVar(t)),
                       expList()))),
                   comStmList())))                )),
              comStmList(
               comStm(
                ifStm(
                 opExp(
                  and,
                  opExp(
                   lt,
                   varExp(
                    simpleVar(c)),
                   intExp(0)),
                  opExp(
                   or,
                   opExp(
                    eq,
                    opExp(
                     sub,
                     varExp(
                      simpleVar(a)),
                     varExp(
                      simpleVar(c))),
                    varExp(
                     simpleVar(b))),
                   opExp(
                    ne,
                    varExp(
                     simpleVar(a)),
                    opExp(
                     mul,
                     varExp(
                      simpleVar(d)),
                     intExp(2))))),
                 blockStm(
                  comStmList(
                   comStm(
                    assignStm(
                     simpleVar(t),
                     intExp(1))),
                   comStmList(
                    comStm(
                     expStm(
                      callExp(putint,
                       expList(
                        varExp(
                         simpleVar(t)),
                        expList()))),
                    comStmList())))                 )),
               comStmList(
                comStm(
                 returnStm(
                  intExp(0))),
                comStmList())))))))))))))),
  decList())

after semantic ast:
 decList(
  functionDec(main,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       decList(
        variableDec(b,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(c,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(d,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(a),
           intExp(10))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(b),
            intExp(6))),
          comStmList(
           comStm(
            assignStm(
             simpleVar(c),
             intExp(4))),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(5))),
            comStmList(
             comStm(
              decList(
               variableDec(t,
                int,
                FALSE),
               decList()),),
             comStmList(
              comStm(
               ifStm(
                opExp(
                 or,
                 opExp(
                  eq,
                  opExp(
                   add,
                   varExp(
                    simpleVar(b)),
                   varExp(
                    simpleVar(c))),
                  varExp(
                   simpleVar(a))),
                 opExp(
                  ne,
                  varExp(
                   simpleVar(d)),
                  opExp(
                   dev,
                   varExp(
                    simpleVar(a)),
                   intExp(2)))),
                blockStm(
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(t),
                    opExp(
                     add,
                     varExp(
                      simpleVar(b)),
                     opExp(
                      mul,
                      opExp(
                       dev,
                       varExp(
                        simpleVar(c)),
                       varExp(
                        simpleVar(d))),
                      intExp(2))))),
                  comStmList(
                   comStm(
                    expStm(
                     callExp(putint,
                      expList(
                       varExp(
                        simpleVar(t)),
                       expList()))),
                   comStmList())))                )),
              comStmList(
               comStm(
                ifStm(
                 opExp(
                  and,
                  opExp(
                   lt,
                   varExp(
                    simpleVar(c)),
                   intExp(0)),
                  opExp(
                   or,
                   opExp(
                    eq,
                    opExp(
                     sub,
                     varExp(
                      simpleVar(a)),
                     varExp(
                      simpleVar(c))),
                    varExp(
                     simpleVar(b))),
                   opExp(
                    ne,
                    varExp(
                     simpleVar(a)),
                    opExp(
                     mul,
                     varExp(
                      simpleVar(d)),
                     intExp(2))))),
                 blockStm(
                  comStmList(
                   comStm(
                    assignStm(
                     simpleVar(t),
                     intExp(1))),
                   comStmList(
                    comStm(
                     expStm(
                      callExp(putint,
                       expList(
                        varExp(
                         simpleVar(t)),
                        expList()))),
                    comStmList())))                 )),
               comStmList(
                comStm(
                 returnStm(
                  intExp(0))),
                comStmList())))))))))))))),
  decList())
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        SEQ(
         SEQ(
          SEQ(
           SEQ(
            SEQ(
             EXP(
              CONST 0),
             EXP(
              CONST 0)),
            EXP(
             CONST 0)),
           EXP(
            CONST 0)),
          MOVE(
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           CONST 10)),
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -8)),
          CONST 6)),
        MOVE(
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -12)),
         CONST 4)),
       MOVE(
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -16)),
        CONST 5)),
      EXP(
       CONST 0)),
     SEQ(
      SEQ(
       SEQ(
        CJUMP(T_eq,
         BINOP(T_add,
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -8)),
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -12))),
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -4)),
         L2,L1),
        SEQ(
         LABEL L1,
         CJUMP(T_ne,
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -16)),
          BINOP(T_div,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           CONST 2),
          L2,L3))),
       SEQ(
        LABEL L2,
        SEQ(
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -20)),
          BINOP(T_add,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -8)),
           BINOP(T_mul,
            BINOP(T_div,
             MEM(
              BINOP(T_add,
               TEMP tFP,
               CONST -12)),
             MEM(
              BINOP(T_add,
               TEMP tFP,
               CONST -16))),
            CONST 2))),
         EXP(
          CALL(
           NAME putint,
            TEMP tFP,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -20))))))),
      LABEL L3)),
    SEQ(
     SEQ(
      SEQ(
       CJUMP(T_lt,
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -12)),
        CONST 0,
        L5,L7),
       SEQ(
        LABEL L5,
        SEQ(
         CJUMP(T_eq,
          BINOP(T_sub,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -12))),
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -8)),
          L6,L4),
         SEQ(
          LABEL L4,
          CJUMP(T_ne,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           BINOP(T_mul,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -16)),
            CONST 2),
           L6,L7))))),
      SEQ(
       LABEL L6,
       SEQ(
        MOVE(
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -20)),
         CONST 1),
        EXP(
         CALL(
          NAME putint,
           TEMP tFP,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -20))))))),
     LABEL L7)),
   MOVE(
    TEMP tRV,
    CONST 0)))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 10)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 6)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 4)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  CONST 5)
----dived line----
 CJUMP(T_eq,
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12))),
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  L2,L1)
----dived line----
 LABEL L1
----dived line----
 CJUMP(T_ne,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  BINOP(T_div,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   CONST 2),
  L2,L3)
----dived line----
 LABEL L3
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 0,
  L5,L7)
----dived line----
 LABEL L7
----dived line----
 MOVE(
  TEMP tRV,
  CONST 0)
----dived line----
 JUMP(
  NAME L8)
----dived line----
 LABEL L2
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -20)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   BINOP(T_mul,
    BINOP(T_div,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -12)),
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -16))),
    CONST 2)))
----dived line----
 EXP(
  CALL(
   NAME putint,
    TEMP tFP,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -20))))
----dived line----
 JUMP(
  NAME L3)
----dived line----
 LABEL L5
----dived line----
 CJUMP(T_eq,
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12))),
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  L6,L4)
----dived line----
 LABEL L4
----dived line----
 CJUMP(T_ne,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_mul,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -16)),
   CONST 2),
  L7,L6)
----dived line----
 LABEL L6
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -20)),
  CONST 1)
----dived line----
 EXP(
  CALL(
   NAME putint,
    TEMP tFP,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -20))))
----dived line----
 JUMP(
  NAME L7)
----dived line----
 LABEL L8
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#10
, dst=0x5563b91b5e80, src=(nil)
result=MOV 102,#10

a format: assem=STR 's0,['d0,#-4]
, dst=0x5563b91b6090, src=0x5563b91b5ef0
result=STR 102,[FP,#-4]

a format: assem=MOV 'd0,#6
, dst=0x5563b91b6470, src=(nil)
result=MOV 103,#6

a format: assem=STR 's0,['d0,#-8]
, dst=0x5563b91b6680, src=0x5563b91b64e0
result=STR 103,[FP,#-8]

a format: assem=MOV 'd0,#4
, dst=0x5563b91b6a60, src=(nil)
result=MOV 104,#4

a format: assem=STR 's0,['d0,#-12]
, dst=0x5563b91b6c70, src=0x5563b91b6ad0
result=STR 104,[FP,#-12]

a format: assem=MOV 'd0,#5
, dst=0x5563b91b7050, src=(nil)
result=MOV 105,#5

a format: assem=STR 's0,['d0,#-16]
, dst=0x5563b91b7260, src=0x5563b91b70c0
result=STR 105,[FP,#-16]

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x5563b91b79d0, src=0x5563b91b79b0
result=LDR 107,[FP,#-8]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x5563b91b7dd0, src=0x5563b91b7db0
result=LDR 108,[FP,#-12]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x5563b91b7e80, src=0x5563b91b7e60
result=ADD 106,107,108

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x5563b91b8280, src=0x5563b91b8260
result=LDR 109,[FP,#-4]

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x5563b91b8310
result=CMP 106,109

a format: assem=BEQ L2
, dst=(nil), src=(nil)
result=BEQ L2

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x5563b91b8b80, src=0x5563b91b8b60
result=LDR 110,[FP,#-16]

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x5563b91b9170, src=0x5563b91b9150
result=LDR 112,[FP,#-4]

a format: assem=MOV 'd0,#2
, dst=0x5563b91b93d0, src=(nil)
result=MOV 113,#2

a format: assem=除法div
, dst=0x5563b91b9480, src=0x5563b91b9460
result=除法div

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x5563b91b9510
result=CMP 110,111

a format: assem=BNE L2
, dst=(nil), src=(nil)
result=BNE L2

a format: assem=B L3
, dst=(nil), src=(nil)
result=B L3

a format: assem=L3:
, dst=(nil), src=(nil)
result=L3:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x5563b91b9d80, src=0x5563b91b9d60
result=LDR 114,[FP,#-12]

a format: assem=MOV 'd0,#0
, dst=0x5563b91b9fe0, src=(nil)
result=MOV 115,#0

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x5563b91ba070
result=CMP 114,115

a format: assem=BLT L5
, dst=(nil), src=(nil)
result=BLT L5

a format: assem=B L7
, dst=(nil), src=(nil)
result=B L7

a format: assem=L7:
, dst=(nil), src=(nil)
result=L7:

a format: assem=MOV 'd0,#0
, dst=0x5563b91ba740, src=(nil)
result=MOV 116,#0

a format: assem=MOV 'd0, 's0
, dst=0x5563b91ba7d0, src=0x5563b91ba7b0
result=MOV RV, 116

a format: assem=B L8
, dst=(nil), src=(nil)
result=B L8

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x5563b91bb300, src=0x5563b91bb2e0
result=LDR 118,[FP,#-8]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x5563b91bbae0, src=0x5563b91bbac0
result=LDR 121,[FP,#-12]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x5563b91bbee0, src=0x5563b91bbec0
result=LDR 122,[FP,#-16]

a format: assem=除法div
, dst=0x5563b91bbf90, src=0x5563b91bbf70
result=除法div

a format: assem=MOV 'd0,#2
, dst=0x5563b91bc1f0, src=(nil)
result=MOV 123,#2

a format: assem=MUL 'd0,'s0,'s1
, dst=0x5563b91bc2a0, src=0x5563b91bc280
result=MUL 119,120,123

a format: assem=ADD 'd0,'s0,'s1
, dst=0x5563b91bc350, src=0x5563b91bc330
result=ADD 117,118,119

a format: assem=STR 's0,['d0,#-20]
, dst=0x5563b91bc560, src=0x5563b91bc3c0
result=STR 117,[FP,#-20]

BEGIN L0
L0:
MOV 102,#10
STR 102,[FP,#-4]
MOV 103,#6
STR 103,[FP,#-8]
MOV 104,#4
STR 104,[FP,#-12]
MOV 105,#5
STR 105,[FP,#-16]
LDR 107,[FP,#-8]
LDR 108,[FP,#-12]
ADD 106,107,108
LDR 109,[FP,#-4]
CMP 106,109
BEQ L2
B L1
L1:
LDR 110,[FP,#-16]
LDR 112,[FP,#-4]
MOV 113,#2
除法div
CMP 110,111
BNE L2
B L3
L3:
LDR 114,[FP,#-12]
MOV 115,#0
CMP 114,115
BLT L5
B L7
L7:
MOV 116,#0
MOV RV, 116
B L8
L2:
LDR 118,[FP,#-8]
LDR 121,[FP,#-12]
LDR 122,[FP,#-16]
除法div
MOV 123,#2
MUL 119,120,123
ADD 117,118,119
STR 117,[a format: assem=BL putint
, dst=(nil), src=(nil)
result=BL putint

a format: assem=B L3
, dst=(nil), src=(nil)
result=B L3

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x5563b91bd2a0, src=0x5563b91bd280
result=LDR 125,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x5563b91bd6a0, src=0x5563b91bd680
result=LDR 126,[FP,#-12]

a format: assem=SUB 'd0,'s0,'s1
, dst=0x5563b91bd750, src=0x5563b91bd730
result=SUB 124,125,126

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x5563b91bdb50, src=0x5563b91bdb30
result=LDR 127,[FP,#-8]

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x5563b91bdbe0
result=CMP 124,127

a format: assem=BEQ L6
, dst=(nil), src=(nil)
result=BEQ L6

a format: assem=B L4
, dst=(nil), src=(nil)
result=B L4

a format: assem=L4:
, dst=(nil), src=(nil)
result=L4:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x5563b91be450, src=0x5563b91be430
result=LDR 128,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x5563b91bea40, src=0x5563b91bea20
result=LDR 130,[FP,#-16]

a format: assem=MOV 'd0,#2
, dst=0x5563b91beca0, src=(nil)
result=MOV 131,#2

a format: assem=MUL 'd0,'s0,'s1
, dst=0x5563b91bed50, src=0x5563b91bed30
result=MUL 129,130,131

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x5563b91bede0
result=CMP 128,129

a format: assem=BNE L7
, dst=(nil), src=(nil)
result=BNE L7

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=MOV 'd0,#1
, dst=0x5563b91bf4b0, src=(nil)
result=MOV 132,#1

a format: assem=STR 's0,['d0,#-20]
, dst=0x5563b91bf6c0, src=0x5563b91bf520
result=STR 132,[FP,#-20]

a format: assem=BL putint
, dst=(nil), src=(nil)
result=BL putint

a format: assem=B L7
, dst=(nil), src=(nil)
result=B L7

a format: assem=L8:
, dst=(nil), src=(nil)
result=L8:

FP,#-20]
BL putint
B L3
L5:
LDR 125,[FP,#-4]
LDR 126,[FP,#-12]
SUB 124,125,126
LDR 127,[FP,#-8]
CMP 124,127
BEQ L6
B L4
L4:
LDR 128,[FP,#-4]
LDR 130,[FP,#-16]
MOV 131,#2
MUL 129,130,131
CMP 128,129
BNE L7
B L6
L6:
MOV 132,#1
STR 132,[FP,#-20]
BL putint
B L7
L8:

END L0

