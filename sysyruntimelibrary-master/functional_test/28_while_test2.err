
before semantic ast:
 decList(
  functionDec(FourWhile,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(a),
        intExp(5))),
      comStmList(
       comStm(
        decList(
         variableDec(b,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(c,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(b),
           intExp(6))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(c),
            intExp(7))),
          comStmList(
           comStm(
            decList(
             variableDec(d,
              int,
              FALSE),
             decList()),),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(10))),
            comStmList(
             comStm(
              whileStm(
               opExp(
                lt,
                varExp(
                 simpleVar(a)),
                intExp(20)),
               blockStm(
                comStmList(
                 comStm(
                  assignStm(
                   simpleVar(a),
                   opExp(
                    add,
                    varExp(
                     simpleVar(a)),
                    intExp(3)))),
                 comStmList(
                  comStm(
                   whileStm(
                    opExp(
                     lt,
                     varExp(
                      simpleVar(b)),
                     intExp(10)),
                    blockStm(
                     comStmList(
                      comStm(
                       assignStm(
                        simpleVar(b),
                        opExp(
                         add,
                         varExp(
                          simpleVar(b)),
                         intExp(1)))),
                      comStmList(
                       comStm(
                        whileStm(
                         opExp(
                          eq,
                          varExp(
                           simpleVar(c)),
                          intExp(7)),
                         blockStm(
                          comStmList(
                           comStm(
                            assignStm(
                             simpleVar(c),
                             opExp(
                              sub,
                              varExp(
                               simpleVar(c)),
                              intExp(1)))),
                           comStmList(
                            comStm(
                             whileStm(
                              opExp(
                               lt,
                               varExp(
                                simpleVar(d)),
                               intExp(20)),
                              blockStm(
                               comStmList(
                                comStm(
                                 assignStm(
                                  simpleVar(d),
                                  opExp(
                                   add,
                                   varExp(
                                    simpleVar(d)),
                                   intExp(3)))),
                                comStmList())))
),
                            comStmList(
                             comStm(
                              assignStm(
                               simpleVar(d),
                               opExp(
                                sub,
                                varExp(
                                 simpleVar(d)),
                                intExp(1)))),
                             comStmList())))))
),
                       comStmList(
                        comStm(
                         assignStm(
                          simpleVar(c),
                          opExp(
                           add,
                           varExp(
                            simpleVar(c)),
                           intExp(1)))),
                        comStmList())))))
),
                  comStmList(
                   comStm(
                    assignStm(
                     simpleVar(b),
                     opExp(
                      sub,
                      varExp(
                       simpleVar(b)),
                      intExp(2)))),
                   comStmList())))))
),
             comStmList(
              comStm(
               returnStm(
                opExp(
                 add,
                 opExp(
                  add,
                  varExp(
                   simpleVar(a)),
                  opExp(
                   add,
                   varExp(
                    simpleVar(b)),
                   varExp(
                    simpleVar(d)))),
                 varExp(
                  simpleVar(c))))),
              comStmList())))))))))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        callExp(FourWhile,
         expList()))),
      comStmList()))),
   decList()))

after semantic ast:
 decList(
  functionDec(FourWhile,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(a),
        intExp(5))),
      comStmList(
       comStm(
        decList(
         variableDec(b,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(c,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(b),
           intExp(6))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(c),
            intExp(7))),
          comStmList(
           comStm(
            decList(
             variableDec(d,
              int,
              FALSE),
             decList()),),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(10))),
            comStmList(
             comStm(
              whileStm(
               opExp(
                lt,
                varExp(
                 simpleVar(a)),
                intExp(20)),
               blockStm(
                comStmList(
                 comStm(
                  assignStm(
                   simpleVar(a),
                   opExp(
                    add,
                    varExp(
                     simpleVar(a)),
                    intExp(3)))),
                 comStmList(
                  comStm(
                   whileStm(
                    opExp(
                     lt,
                     varExp(
                      simpleVar(b)),
                     intExp(10)),
                    blockStm(
                     comStmList(
                      comStm(
                       assignStm(
                        simpleVar(b),
                        opExp(
                         add,
                         varExp(
                          simpleVar(b)),
                         intExp(1)))),
                      comStmList(
                       comStm(
                        whileStm(
                         opExp(
                          eq,
                          varExp(
                           simpleVar(c)),
                          intExp(7)),
                         blockStm(
                          comStmList(
                           comStm(
                            assignStm(
                             simpleVar(c),
                             opExp(
                              sub,
                              varExp(
                               simpleVar(c)),
                              intExp(1)))),
                           comStmList(
                            comStm(
                             whileStm(
                              opExp(
                               lt,
                               varExp(
                                simpleVar(d)),
                               intExp(20)),
                              blockStm(
                               comStmList(
                                comStm(
                                 assignStm(
                                  simpleVar(d),
                                  opExp(
                                   add,
                                   varExp(
                                    simpleVar(d)),
                                   intExp(3)))),
                                comStmList())))
),
                            comStmList(
                             comStm(
                              assignStm(
                               simpleVar(d),
                               opExp(
                                sub,
                                varExp(
                                 simpleVar(d)),
                                intExp(1)))),
                             comStmList())))))
),
                       comStmList(
                        comStm(
                         assignStm(
                          simpleVar(c),
                          opExp(
                           add,
                           varExp(
                            simpleVar(c)),
                           intExp(1)))),
                        comStmList())))))
),
                  comStmList(
                   comStm(
                    assignStm(
                     simpleVar(b),
                     opExp(
                      sub,
                      varExp(
                       simpleVar(b)),
                      intExp(2)))),
                   comStmList())))))
),
             comStmList(
              comStm(
               returnStm(
                opExp(
                 add,
                 opExp(
                  add,
                  varExp(
                   simpleVar(a)),
                  opExp(
                   add,
                   varExp(
                    simpleVar(b)),
                   varExp(
                    simpleVar(d)))),
                 varExp(
                  simpleVar(c))))),
              comStmList())))))))))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        callExp(FourWhile,
         expList()))),
      comStmList()))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L21,
  MOVE(
   TEMP tRV,
   CALL(
    NAME L0,
     TEMP tFP))) SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        SEQ(
         SEQ(
          SEQ(
           EXP(
            CONST 0),
           MOVE(
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -4)),
            CONST 5)),
          EXP(
           CONST 0)),
         EXP(
          CONST 0)),
        MOVE(
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -8)),
         CONST 6)),
       MOVE(
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -12)),
        CONST 7)),
      EXP(
       CONST 0)),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -16)),
      CONST 10)),
    SEQ(
     LABEL L2,
     SEQ(
      CJUMP(T_lt,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -4)),
       CONST 20,
       L20,L1),
      SEQ(
       LABEL L20,
       SEQ(
        SEQ(
         SEQ(
          MOVE(
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           BINOP(T_add,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -4)),
            CONST 3)),
          SEQ(
           LABEL L6,
           SEQ(
            CJUMP(T_lt,
             MEM(
              BINOP(T_add,
               TEMP tFP,
               CONST -8)),
             CONST 10,
             L19,L5),
            SEQ(
             LABEL L19,
             SEQ(
              SEQ(
               SEQ(
                MOVE(
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -8)),
                 BINOP(T_add,
                  MEM(
                   BINOP(T_add,
                    TEMP tFP,
                    CONST -8)),
                  CONST 1)),
                SEQ(
                 LABEL L10,
                 SEQ(
                  CJUMP(T_eq,
                   MEM(
                    BINOP(T_add,
                     TEMP tFP,
                     CONST -12)),
                   CONST 7,
                   L18,L9),
                  SEQ(
                   LABEL L18,
                   SEQ(
                    SEQ(
                     SEQ(
                      MOVE(
                       MEM(
                        BINOP(T_add,
                         TEMP tFP,
                         CONST -12)),
                       BINOP(T_sub,
                        MEM(
                         BINOP(T_add,
                          TEMP tFP,
                          CONST -12)),
                        CONST 1)),
                      SEQ(
                       LABEL L14,
                       SEQ(
                        CJUMP(T_lt,
                         MEM(
                          BINOP(T_add,
                           TEMP tFP,
                           CONST -16)),
                         CONST 20,
                         L17,L13),
                        SEQ(
                         LABEL L17,
                         SEQ(
                          MOVE(
                           MEM(
                            BINOP(T_add,
                             TEMP tFP,
                             CONST -16)),
                           BINOP(T_add,
                            MEM(
                             BINOP(T_add,
                              TEMP tFP,
                              CONST -16)),
                            CONST 3)),
                          SEQ(
                           JUMP(
                            NAME L14),
                           LABEL L13)))))),
                     MOVE(
                      MEM(
                       BINOP(T_add,
                        TEMP tFP,
                        CONST -16)),
                      BINOP(T_sub,
                       MEM(
                        BINOP(T_add,
                         TEMP tFP,
                         CONST -16)),
                       CONST 1))),
                    SEQ(
                     JUMP(
                      NAME L10),
                     LABEL L9)))))),
               MOVE(
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -12)),
                BINOP(T_add,
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -12)),
                 CONST 1))),
              SEQ(
               JUMP(
                NAME L6),
               LABEL L5)))))),
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -8)),
          BINOP(T_sub,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -8)),
           CONST 2))),
        SEQ(
         JUMP(
          NAME L2),
         LABEL L1)))))),
   MOVE(
    TEMP tRV,
    BINOP(T_add,
     BINOP(T_add,
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)),
      BINOP(T_add,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -8)),
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -16)))),
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -12))))))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L21
----dived line----
 MOVE(
  TEMP tRV,
  CALL(
   NAME L0,
    TEMP tFP))
----dived line----
 JUMP(
  NAME L22)
----dived line----
 LABEL L22
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L21:
, dst=(nil), src=(nil)
result=L21:

a format: assem=BL L0
, dst=0x55f7ce873b40, src=(nil)
result=BL L0

a format: assem=MOV `d0, `s0
, dst=0x55f7ce873bd0, src=0x55f7ce873bb0
result=MOV `d0, `s0

a format: assem=B L22
, dst=(nil), src=(nil)
result=B L22

a format: assem=L22:
, dst=(nil), src=(nil)
result=L22:


↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 5)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 6)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 7)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  CONST 10)
----dived line----
 LABEL L2
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 20,
  L20,L1)
----dived line----
 LABEL L1
----dived line----
 MOVE(
  TEMP tRV,
  BINOP(T_add,
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -4)),
    BINOP(T_add,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -8)),
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -16)))),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12))))
----dived line----
 JUMP(
  NAME L23)
----dived line----
 LABEL L20
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   CONST 3))
----dived line----
 LABEL L6
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 10,
  L19,L5)
----dived line----
 LABEL L5
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   CONST 2))
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L19
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   CONST 1))
----dived line----
 LABEL L10
----dived line----
 CJUMP(T_eq,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 7,
  L18,L9)
----dived line----
 LABEL L9
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12)),
   CONST 1))
----dived line----
 JUMP(
  NAME L6)
----dived line----
 LABEL L18
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12)),
   CONST 1))
----dived line----
 LABEL L14
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  CONST 20,
  L17,L13)
----dived line----
 LABEL L13
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -16)),
   CONST 1))
----dived line----
 JUMP(
  NAME L10)
----dived line----
 LABEL L17
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -16)),
   CONST 3))
----dived line----
 JUMP(
  NAME L14)
----dived line----
 LABEL L23
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#5
, dst=0x55f7ce87b7c0, src=(nil)
result=MOV 101,#5

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f7ce87b9d0, src=0x55f7ce87b830
result=STR 101,[FP,#-4]

a format: assem=MOV 'd0,#6
, dst=0x55f7ce87bdb0, src=(nil)
result=MOV 102,#6

a format: assem=STR 's0,['d0,#-8]
, dst=0x55f7ce87bfc0, src=0x55f7ce87be20
result=STR 102,[FP,#-8]

a format: assem=MOV 'd0,#7
, dst=0x55f7ce87c3a0, src=(nil)
result=MOV 103,#7

a format: assem=STR 's0,['d0,#-12]
, dst=0x55f7ce87c5b0, src=0x55f7ce87c410
result=STR 103,[FP,#-12]

a format: assem=MOV 'd0,#10
, dst=0x55f7ce87c990, src=(nil)
result=MOV 104,#10

a format: assem=STR 's0,['d0,#-16]
, dst=0x55f7ce87cba0, src=0x55f7ce87ca00
result=STR 104,[FP,#-16]

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f7ce87d2f0, src=0x55f7ce87d2d0
result=LDR 105,[FP,#-4]

a format: assem=MOV 'd0,#20
, dst=0x55f7ce87d550, src=(nil)
result=MOV 106,#20

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f7ce87d5e0
result=CMP 105,106

a format: assem=BLT L20
, dst=(nil), src=(nil)
result=BLT L20

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f7ce87e230, src=0x55f7ce87e210
result=LDR 109,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f7ce87e820, src=0x55f7ce87e800
result=LDR 111,[FP,#-8]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x55f7ce87ec20, src=0x55f7ce87ec00
result=LDR 112,[FP,#-16]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55f7ce87ecd0, src=0x55f7ce87ecb0
result=ADD 110,111,112

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55f7ce87ed80, src=0x55f7ce87ed60
result=ADD 108,109,110

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55f7ce87f180, src=0x55f7ce87f160
result=LDR 113,[FP,#-12]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55f7ce87f230, src=0x55f7ce87f210
result=ADD 107,108,113

a format: assem=MOV 'd0, 's0
, dst=0x55f7ce87f2c0, src=0x55f7ce87f2a0
result=MOV RV, 107

a format: assem=B L23
, dst=(nil), src=(nil)
result=B L23

a format: assem=L20:
, dst=(nil), src=(nil)
result=L20:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f7ce87fdf0, src=0x55f7ce87fdd0
result=LDR 115,[FP,#-4]

a format: assem=ADD 'd0,'s0,3
, dst=0x55f7ce87fe80, src=0x55f7ce87fe60
result=ADD 114,115,3

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f7ce880090, src=0x55f7ce87fef0
result=STR 114,[FP,#-4]

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f7ce8807e0, src=0x55f7ce8807c0
result=LDR 116,[FP,#-8]

a format: assem=MOV 'd0,#10
, dst=0x55f7ce880a40, src=(nil)
result=MOV 117,#10

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f7ce880ad0
result=CMP 116,117

a format: assem=BLT L19
, dst=(nil), src=(nil)
result=BLT L19

a format: assem=B L5
, dst=(nil), src=(nil)
result=B L5

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f7ce881530, src=0x55f7ce881510
result=LDR 119,[FP,#-8]

BEGIN L21
L21:
BL L0
MOV `d0, `s0
B L22
L22:

END L21

BEGIN L0
L0:
MOV 101,#5
STR 101,[FP,#-4]
MOV 102,#6
STR 102,[FP,#-8]
MOV 103,#7
STR 103,[FP,#-12]
MOV 104,#10
STR 104,[FP,#-16]
L2:
LDR 105,[FP,#-4]
MOV 106,#20
CMP 105,106
BLT L20
B L1
L1:
LDR 109,[FP,#-4]
LDR 111,[FP,#-8]
LDR 112,[FP,#-16]
ADD 110,111,112
ADD 108,109,110
LDR 113,[FP,#-12]
ADD 107,108,113
MOV RV, 107
B L23
L20:
LDR 115,[FP,#-4]
ADD 114,115,3
STR 114,[FP,#-4]
L6:
LDR 116,[FP,#-8]
MOV 117,#10
CMP 116,117
BLT L19
B L5
L5:
LDR 119,[FP,#-8]a format: assem=SUB 'd0,'s0,2
, dst=0x55f7ce8815c0, src=0x55f7ce8815a0
result=SUB 118,119,2

a format: assem=STR 's0,['d0,#-8]
, dst=0x55f7ce8817d0, src=0x55f7ce881630
result=STR 118,[FP,#-8]

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L19:
, dst=(nil), src=(nil)
result=L19:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f7ce882300, src=0x55f7ce8822e0
result=LDR 121,[FP,#-8]

a format: assem=ADD 'd0,'s0,1
, dst=0x55f7ce882390, src=0x55f7ce882370
result=ADD 120,121,1

a format: assem=STR 's0,['d0,#-8]
, dst=0x55f7ce8825a0, src=0x55f7ce882400
result=STR 120,[FP,#-8]

a format: assem=L10:
, dst=(nil), src=(nil)
result=L10:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55f7ce882cf0, src=0x55f7ce882cd0
result=LDR 122,[FP,#-12]

a format: assem=MOV 'd0,#7
, dst=0x55f7ce882f50, src=(nil)
result=MOV 123,#7

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f7ce882fe0
result=CMP 122,123

a format: assem=BEQ L18
, dst=(nil), src=(nil)
result=BEQ L18

a format: assem=B L9
, dst=(nil), src=(nil)
result=B L9

a format: assem=L9:
, dst=(nil), src=(nil)
result=L9:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55f7ce883a40, src=0x55f7ce883a20
result=LDR 125,[FP,#-12]

a format: assem=ADD 'd0,'s0,1
, dst=0x55f7ce883ad0, src=0x55f7ce883ab0
result=ADD 124,125,1

a format: assem=STR 's0,['d0,#-12]
, dst=0x55f7ce883ce0, src=0x55f7ce883b40
result=STR 124,[FP,#-12]

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L18:
, dst=(nil), src=(nil)
result=L18:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55f7ce884810, src=0x55f7ce8847f0
result=LDR 127,[FP,#-12]

a format: assem=SUB 'd0,'s0,1
, dst=0x55f7ce8848a0, src=0x55f7ce884880
result=SUB 126,127,1

a format: assem=STR 's0,['d0,#-12]
, dst=0x55f7ce884ab0, src=0x55f7ce884910
result=STR 126,[FP,#-12]

a format: assem=L14:
, dst=(nil), src=(nil)
result=L14:

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x55f7ce885200, src=0x55f7ce8851e0
result=LDR 128,[FP,#-16]

a format: assem=MOV 'd0,#20
, dst=0x55f7ce885460, src=(nil)
result=MOV 129,#20

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f7ce8854f0
result=CMP 128,129

a format: assem=BLT L17
, dst=(nil), src=(nil)
result=BLT L17

a format: assem=B L13
, dst=(nil), src=(nil)
result=B L13

a format: assem=L13:
, dst=(nil), src=(nil)
result=L13:

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x55f7ce885f50, src=0x55f7ce885f30
result=LDR 131,[FP,#-16]

a format: assem=SUB 'd0,'s0,1
, dst=0x55f7ce885fe0, src=0x55f7ce885fc0
result=SUB 130,131,1

a format: assem=STR 's0,['d0,#-16]
, dst=0x55f7ce8861f0, src=0x55f7ce886050
result=STR 130,[FP,#-16]

a format: assem=B L10
, dst=(nil), src=(nil)
result=B L10

a format: assem=L17:
, dst=(nil), src=(nil)
result=L17:

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x55f7ce886d20, src=0x55f7ce886d00
result=LDR 133,[FP,#-16]

a format: assem=ADD 'd0,'s0,3
, dst=0x55f7ce886db0, src=0x55f7ce886d90
result=ADD 132,133,3

a format: assem=STR 's0,['d0,#-16]
, dst=0x55f7ce886fc0, src=0x55f7ce886e20
result=STR 132,[FP,#-16]

a format: assem=B L14
, dst=(nil), src=(nil)
result=B L14

a format: assem=L23:
, dst=(nil), src=(nil)
result=L23:


SUB 118,119,2
STR 118,[FP,#-8]
B L2
L19:
LDR 121,[FP,#-8]
ADD 120,121,1
STR 120,[FP,#-8]
L10:
LDR 122,[FP,#-12]
MOV 123,#7
CMP 122,123
BEQ L18
B L9
L9:
LDR 125,[FP,#-12]
ADD 124,125,1
STR 124,[FP,#-12]
B L6
L18:
LDR 127,[FP,#-12]
SUB 126,127,1
STR 126,[FP,#-12]
L14:
LDR 128,[FP,#-16]
MOV 129,#20
CMP 128,129
BLT L17
B L13
L13:
LDR 131,[FP,#-16]
SUB 130,131,1
STR 130,[FP,#-16]
B L10
L17:
LDR 133,[FP,#-16]
ADD 132,133,3
STR 132,[FP,#-16]
B L14
L23:

END L0

