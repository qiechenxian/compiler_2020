
before semantic ast:
 decList(
  arrayDec(field,
   int,
   expList(
    intExp(2),
    expList()),
   FALSE),
  decList(
   functionDec(func,
    fieldList(
     field(array,
      int,
      expList(
       intExp(0),
       expList()),
      FALSE,
     fieldList()),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        varExp(
         arrayVar(
          simpleVar(array),
          opExp(
           sub,
           intExp(3),
           varExp(
            arrayVar(
             simpleVar(field),
             intExp(0)))))))),
      comStmList()))),
   decList(
    functionDec(main,
     fieldList(),
     int,
     blockStm(
      comStmList(
       comStm(
        decList(
         arrayDec(i,
          int,
          expList(
           intExp(1),
           expList()),
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          arrayDec(j,
           int,
           expList(
            intExp(3),
            expList()),
           FALSE),
          decList()),),
        comStmList(
         comStm(
          decList(
           variableDec(k,
            int,
            FALSE),
           decList()),),
         comStmList(
          comStm(
           assignStm(
            arrayVar(
             simpleVar(field),
             intExp(0)),
            intExp(1))),
          comStmList(
           comStm(
            assignStm(
             arrayVar(
              simpleVar(field),
              intExp(1)),
             intExp(2))),
           comStmList(
            comStm(
             assignStm(
              arrayVar(
               simpleVar(j),
               opExp(
                add,
                intExp(0),
                intExp(0))),
              opExp(
               sub,
               intExp(0),
               intExp(1)))),
            comStmList(
             comStm(
              assignStm(
               arrayVar(
                simpleVar(j),
                intExp(1)),
               opExp(
                sub,
                varExp(
                 arrayVar(
                  simpleVar(j),
                  intExp(0))),
                intExp(2)))),
             comStmList(
              comStm(
               assignStm(
                simpleVar(k),
                varExp(
                 arrayVar(
                  simpleVar(j),
                  intExp(1))))),
              comStmList(
               comStm(
                assignStm(
                 arrayVar(
                  simpleVar(j),
                  intExp(2)),
                 intExp(16))),
               comStmList(
                comStm(
                 returnStm(
                  opExp(
                   add,
                   opExp(
                    add,
                    callExp(func,
                     expList(
                      varExp(
                       simpleVar(j)),
                      expList())),
                    intExp(2)),
                   varExp(
                    simpleVar(k))))),
                comStmList())))))))))))),
    decList())))

after semantic ast:
 decList(
  arrayDec(field,
   int,
   expList(
    intExp(2),
    expList()),
   FALSE),
  decList(
   functionDec(func,
    fieldList(
     field(array,
      int,
      expList(
       intExp(0),
       expList()),
      FALSE,
     fieldList()),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        varExp(
         arrayVar(
          simpleVar(array),
          opExp(
           sub,
           intExp(3),
           varExp(
            arrayVar(
             simpleVar(field),
             intExp(0)))))))),
      comStmList()))),
   decList(
    functionDec(main,
     fieldList(),
     int,
     blockStm(
      comStmList(
       comStm(
        decList(
         arrayDec(i,
          int,
          expList(
           intExp(1),
           expList()),
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          arrayDec(j,
           int,
           expList(
            intExp(3),
            expList()),
           FALSE),
          decList()),),
        comStmList(
         comStm(
          decList(
           variableDec(k,
            int,
            FALSE),
           decList()),),
         comStmList(
          comStm(
           assignStm(
            arrayVar(
             simpleVar(field),
             intExp(0)),
            intExp(1))),
          comStmList(
           comStm(
            assignStm(
             arrayVar(
              simpleVar(field),
              intExp(1)),
             intExp(2))),
           comStmList(
            comStm(
             assignStm(
              arrayVar(
               simpleVar(j),
               intExp(0)),
              intExp(-1))),
            comStmList(
             comStm(
              assignStm(
               arrayVar(
                simpleVar(j),
                intExp(1)),
               opExp(
                sub,
                varExp(
                 arrayVar(
                  simpleVar(j),
                  intExp(0))),
                intExp(2)))),
             comStmList(
              comStm(
               assignStm(
                simpleVar(k),
                varExp(
                 arrayVar(
                  simpleVar(j),
                  intExp(1))))),
              comStmList(
               comStm(
                assignStm(
                 arrayVar(
                  simpleVar(j),
                  intExp(2)),
                 intExp(16))),
               comStmList(
                comStm(
                 returnStm(
                  opExp(
                   add,
                   opExp(
                    add,
                    callExp(func,
                     expList(
                      varExp(
                       simpleVar(j)),
                      expList())),
                    intExp(2)),
                   varExp(
                    simpleVar(k))))),
                comStmList())))))))))))),
    decList())))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L1,
  SEQ(
   SEQ(
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        SEQ(
         SEQ(
          SEQ(
           EXP(
            CONST 0),
           EXP(
            CONST 0)),
          EXP(
           CONST 0)),
         MOVE(
          MEM(
           BINOP(T_add,
            NAME field,
            BINOP(T_mul,
             CONST 0,
             CONST 4))),
          CONST 1)),
        MOVE(
         MEM(
          BINOP(T_add,
           NAME field,
           BINOP(T_mul,
            CONST 1,
            CONST 4))),
         CONST 2)),
       MOVE(
        MEM(
         BINOP(T_add,
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -16)),
          BINOP(T_mul,
           BINOP(T_add,
            CONST 0,
            CONST 0),
           CONST 4))),
        BINOP(T_sub,
         CONST 0,
         CONST 1))),
      MOVE(
       MEM(
        BINOP(T_add,
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -16)),
         BINOP(T_mul,
          CONST 1,
          CONST 4))),
       BINOP(T_sub,
        MEM(
         BINOP(T_add,
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -16)),
          BINOP(T_mul,
           CONST 0,
           CONST 4))),
        CONST 2))),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -20)),
      MEM(
       BINOP(T_add,
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -16)),
        BINOP(T_mul,
         CONST 1,
         CONST 4))))),
    MOVE(
     MEM(
      BINOP(T_add,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -16)),
       BINOP(T_mul,
        CONST 2,
        CONST 4))),
     CONST 16)),
   MOVE(
    TEMP tRV,
    BINOP(T_add,
     BINOP(T_add,
      CALL(
       NAME L0,
        TEMP tFP,
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -16))),
      CONST 2),
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -20)))))) SEQ(
  LABEL L0,
  MOVE(
   TEMP tRV,
   MEM(
    BINOP(T_add,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST 4)),
     BINOP(T_mul,
      BINOP(T_sub,
       CONST 3,
       MEM(
        BINOP(T_add,
         NAME field,
         BINOP(T_mul,
          CONST 0,
          CONST 4)))),
      CONST 4)))))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L1
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    NAME field,
    BINOP(T_mul,
     CONST 0,
     CONST 4))),
  CONST 1)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    NAME field,
    BINOP(T_mul,
     CONST 1,
     CONST 4))),
  CONST 2)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -16)),
    BINOP(T_mul,
     BINOP(T_add,
      CONST 0,
      CONST 0),
     CONST 4))),
  BINOP(T_sub,
   CONST 0,
   CONST 1))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -16)),
    BINOP(T_mul,
     CONST 1,
     CONST 4))),
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -16)),
     BINOP(T_mul,
      CONST 0,
      CONST 4))),
   CONST 2))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -20)),
  MEM(
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -16)),
    BINOP(T_mul,
     CONST 1,
     CONST 4))))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -16)),
    BINOP(T_mul,
     CONST 2,
     CONST 4))),
  CONST 16)
----dived line----
 MOVE(
  TEMP t100,
  CALL(
   NAME L0,
    TEMP tFP,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -16))))
----dived line----
 MOVE(
  TEMP tRV,
  BINOP(T_add,
   BINOP(T_add,
    TEMP t100,
    CONST 2),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -20))))
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L2
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=MOV 'd0,#1
, dst=0x557be5e01320, src=(nil)
result=MOV 101,#1

a format: assem=MOV field,'d0
, dst=0x557be5e01790, src=(nil)
result=MOV field,103

a format: assem=MOV 'd0,#0
, dst=0x557be5e01be0, src=(nil)
result=MOV 105,#0

a format: assem=MOV 'd0,#4
, dst=0x557be5e01e40, src=(nil)
result=MOV 106,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e01ef0, src=0x557be5e01ed0
result=MUL 104,105,106

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e01fa0, src=0x557be5e01f80
result=ADD 102,103,104

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x557be5e02010
result=STR 101,[102]

a format: assem=MOV 'd0,#2
, dst=0x557be5e023f0, src=(nil)
result=MOV 107,#2

a format: assem=MOV field,'d0
, dst=0x557be5e02860, src=(nil)
result=MOV field,109

a format: assem=MOV 'd0,#1
, dst=0x557be5e02cb0, src=(nil)
result=MOV 111,#1

a format: assem=MOV 'd0,#4
, dst=0x557be5e02f10, src=(nil)
result=MOV 112,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e02fc0, src=0x557be5e02fa0
result=MUL 110,111,112

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e03070, src=0x557be5e03050
result=ADD 108,109,110

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x557be5e030e0
result=STR 107,[108]

a format: assem=MOV 'd0,#0
, dst=0x557be5e036b0, src=(nil)
result=MOV 114,#0

a format: assem=SUB 'd0,'s0,1
, dst=0x557be5e03740, src=0x557be5e03720
result=SUB 113,114,1

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x557be5e03d50, src=0x557be5e03d30
result=LDR 116,[FP,#-16]

a format: assem=MOV 'd0,#0
, dst=0x557be5e04390, src=(nil)
result=MOV 119,#0

a format: assem=ADD 'd0,'s0,0
, dst=0x557be5e04420, src=0x557be5e04400
result=ADD 118,119,0

a format: assem=MOV 'd0,#4
, dst=0x557be5e04680, src=(nil)
result=MOV 120,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e04730, src=0x557be5e04710
result=MUL 117,118,120

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e047e0, src=0x557be5e047c0
result=ADD 115,116,117

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x557be5e04850
result=STR 113,[115]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x557be5e053a0, src=0x557be5e05380
result=LDR 124,[FP,#-16]

a format: assem=MOV 'd0,#0
, dst=0x557be5e057f0, src=(nil)
result=MOV 126,#0

a format: assem=MOV 'd0,#4
, dst=0x557be5e05a50, src=(nil)
result=MOV 127,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e05b00, src=0x557be5e05ae0
result=MUL 125,126,127

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e05bb0, src=0x557be5e05b90
result=ADD 123,124,125

a format: assem=LDR 'd0,['s0]
, dst=0x557be5e05c40, src=0x557be5e05c20
result=LDR 122,[123]

a format: assem=SUB 'd0,'s0,2
, dst=0x557be5e05cd0, src=0x557be5e05cb0
result=SUB 121,122,2

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x557be5e062e0, src=0x557be5e062c0
result=LDR 129,[FP,#-16]

a format: assem=MOV 'd0,#1
, dst=0x557be5e06730, src=(nil)
result=MOV 131,#1

a format: assem=MOV 'd0,#4
, dst=0x557be5e06990, src=(nil)
result=MOV 132,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e06a40, src=0x557be5e06a20
result=MUL 130,131,132

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e06af0, src=0x557be5e06ad0
result=ADD 128,129,130

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x557be5e06b60
result=STR 121,[128]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x557be5e074c0, src=0x557be5e074a0
result=LDR 135,[FP,#-16]

BEGIN L1
L1:
MOV 101,#1
MOV field,103
MOV 105,#0
MOV 106,#4
MUL 104,105,106
ADD 102,103,104
STR 101,[102]
MOV 107,#2
MOV field,109
MOV 111,#1
MOV 112,#4
MUL 110,111,112
ADD 108,109,110
STR 107,[108]
MOV 114,#0
SUB 113,114,1
LDR 116,[FP,#-16]
MOV 119,#0
ADD 118,119,0
MOV 120,#4
MUL 117,118,120
ADD 115,116,117
STR 113,[115]
LDR 124,[FP,#-16]
MOV 126,#0
MOV 127,#4
MUL 125,126,127
ADD 123,124,125
LDR 122,[123]
SUB 121,122,2
LDR 129,[FP,#-16]
MOV 131,#1
MOV 132,#4
MUL 130,131,132
ADD 128,129,130
STR 121,[128]
LDa format: assem=MOV 'd0,#1
, dst=0x557be5e07910, src=(nil)
result=MOV 137,#1

a format: assem=MOV 'd0,#4
, dst=0x557be5e07b70, src=(nil)
result=MOV 138,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e07c20, src=0x557be5e07c00
result=MUL 136,137,138

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e07cd0, src=0x557be5e07cb0
result=ADD 134,135,136

a format: assem=LDR 'd0,['s0]
, dst=0x557be5e07d60, src=0x557be5e07d40
result=LDR 133,[134]

a format: assem=STR 's0,['d0,#-20]
, dst=0x557be5e07f70, src=0x557be5e07dd0
result=STR 133,[FP,#-20]

a format: assem=MOV 'd0,#16
, dst=0x557be5e08350, src=(nil)
result=MOV 139,#16

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x557be5e08960, src=0x557be5e08940
result=LDR 141,[FP,#-16]

a format: assem=MOV 'd0,#2
, dst=0x557be5e08db0, src=(nil)
result=MOV 143,#2

a format: assem=MOV 'd0,#4
, dst=0x557be5e09010, src=(nil)
result=MOV 144,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e090c0, src=0x557be5e090a0
result=MUL 142,143,144

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e09170, src=0x557be5e09150
result=ADD 140,141,142

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x557be5e091e0
result=STR 139,[140]

a format: assem=BL L0
, dst=0x557be5e09480, src=(nil)
result=BL L0

a format: assem=MOV `d0, `s0
, dst=0x557be5e09510, src=0x557be5e094f0
result=MOV `d0, `s0

a format: assem=ADD 'd0,'s0,2
, dst=0x557be5e09c80, src=0x557be5e09c60
result=ADD 147,100,2

a format: assem=LDR 'd0,['s0,#-20]
, dst=0x557be5e0a080, src=0x557be5e0a060
result=LDR 148,[FP,#-20]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e0a130, src=0x557be5e0a110
result=ADD 146,147,148

a format: assem=MOV 'd0, 's0
, dst=0x557be5e0a1c0, src=0x557be5e0a1a0
result=MOV RV, 146

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:


↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  TEMP tRV,
  MEM(
   BINOP(T_add,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST 4)),
    BINOP(T_mul,
     BINOP(T_sub,
      CONST 3,
      MEM(
       BINOP(T_add,
        NAME field,
        BINOP(T_mul,
         CONST 0,
         CONST 4)))),
     CONST 4))))
----dived line----
 JUMP(
  NAME L3)
----dived line----
 LABEL L3
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=LDR 'd0,['s0,#4]
, dst=0x557be5e0c6e0, src=0x557be5e0c6c0
result=LDR 151,[FP,#4]

a format: assem=MOV field,'d0
, dst=0x557be5e0d100, src=(nil)
result=MOV field,156

a format: assem=MOV 'd0,#0
, dst=0x557be5e0d550, src=(nil)
result=MOV 158,#0

a format: assem=MOV 'd0,#4
, dst=0x557be5e0d7b0, src=(nil)
result=MOV 159,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e0d860, src=0x557be5e0d840
result=MUL 157,158,159

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e0d910, src=0x557be5e0d8f0
result=ADD 155,156,157

a format: assem=LDR 'd0,['s0]
, dst=0x557be5e0d9a0, src=0x557be5e0d980
result=LDR 154,[155]

a format: assem=SUB 'd0,'s0,3
, dst=0x557be5e0da30, src=0x557be5e0da10
result=SUB 153,154,3

a format: assem=MOV 'd0,#4
, dst=0x557be5e0dc90, src=(nil)
result=MOV 160,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557be5e0dd40, src=0x557be5e0dd20
result=MUL 152,153,160

a format: assem=ADD 'd0,'s0,'s1
, dst=0x557be5e0ddf0, src=0x557be5e0ddd0
result=ADD 150,151,152

a format: assem=LDR 'd0,['s0]
, dst=0x557be5e0de80, src=0x557be5e0de60
result=LDR 149,[150]

a format: assem=MOV 'd0, 's0
, dst=0x557be5e0df10, src=0x557be5e0def0
result=MOV RV, 149

a format: assem=B L3
, dst=(nil), src=(nil)
result=B L3

a format: assem=L3:
, dst=(nil), src=(nil)
result=L3:

R 135,[FP,#-16]
MOV 137,#1
MOV 138,#4
MUL 136,137,138
ADD 134,135,136
LDR 133,[134]
STR 133,[FP,#-20]
MOV 139,#16
LDR 141,[FP,#-16]
MOV 143,#2
MOV 144,#4
MUL 142,143,144
ADD 140,141,142
STR 139,[140]
BL L0
MOV `d0, `s0
ADD 147,100,2
LDR 148,[FP,#-20]
ADD 146,147,148
MOV RV, 146
B L2
L2:

END L1

BEGIN L0
L0:
LDR 151,[FP,#4]
MOV field,156
MOV 158,#0
MOV 159,#4
MUL 157,158,159
ADD 155,156,157
LDR 154,[155]
SUB 153,154,3
MOV 160,#4
MUL 152,153,160
ADD 150,151,152
LDR 149,[150]
MOV RV, 149
B L3
L3:

END L0

