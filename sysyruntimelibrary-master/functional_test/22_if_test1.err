
before semantic ast:
 decList(
  functionDec(ifElse,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(a),
        intExp(5))),
      comStmList(
       comStm(
        ifStm(
         opExp(
          eq,
          varExp(
           simpleVar(a)),
          intExp(5)),
         blockStm(
          comStmList(
           comStm(
            assignStm(
             simpleVar(a),
             intExp(25))),
           comStmList())),/n         blockStm(
          comStmList(
           comStm(
            assignStm(
             simpleVar(a),
             opExp(
              mul,
              varExp(
               simpleVar(a)),
              intExp(2)))),
           comStmList()))         )),
       comStmList(
        comStm(
         returnStm(
          varExp(
           simpleVar(a)))),
        comStmList())))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        callExp(ifElse,
         expList()))),
      comStmList()))),
   decList()))

after semantic ast:
 decList(
  functionDec(ifElse,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(a,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(a),
        intExp(5))),
      comStmList(
       comStm(
        ifStm(
         opExp(
          eq,
          varExp(
           simpleVar(a)),
          intExp(5)),
         blockStm(
          comStmList(
           comStm(
            assignStm(
             simpleVar(a),
             intExp(25))),
           comStmList())),/n         blockStm(
          comStmList(
           comStm(
            assignStm(
             simpleVar(a),
             opExp(
              mul,
              varExp(
               simpleVar(a)),
              intExp(2)))),
           comStmList()))         )),
       comStmList(
        comStm(
         returnStm(
          varExp(
           simpleVar(a)))),
        comStmList())))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       returnStm(
        callExp(ifElse,
         expList()))),
      comStmList()))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L4,
  MOVE(
   TEMP tRV,
   CALL(
    NAME L0,
     TEMP tFP))) SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     EXP(
      CONST 0),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)),
      CONST 5)),
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        CJUMP(T_eq,
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -4)),
         CONST 5,
         L1,L2),
        SEQ(
         LABEL L1,
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -4)),
          CONST 25))),
       JUMP(
        NAME L3)),
      SEQ(
       LABEL L2,
       MOVE(
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -4)),
        BINOP(T_mul,
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -4)),
         CONST 2)))),
     LABEL L3)),
   MOVE(
    TEMP tRV,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -4)))))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L4
----dived line----
 MOVE(
  TEMP tRV,
  CALL(
   NAME L0,
    TEMP tFP))
----dived line----
 JUMP(
  NAME L5)
----dived line----
 LABEL L5
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L4:
, dst=(nil), src=(nil)
result=L4:

a format: assem=BL L0
, dst=0x557100e34200, src=(nil)
result=BL L0

a format: assem=MOV `d0, `s0
, dst=0x557100e34290, src=0x557100e34270
result=MOV `d0, `s0

a format: assem=B L5
, dst=(nil), src=(nil)
result=B L5

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:


↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 5)
----dived line----
 CJUMP(T_eq,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 5,
  L1,L2)
----dived line----
 LABEL L2
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_mul,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   CONST 2))
----dived line----
 LABEL L3
----dived line----
 MOVE(
  TEMP tRV,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)))
----dived line----
 JUMP(
  NAME L6)
----dived line----
 LABEL L1
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 25)
----dived line----
 JUMP(
  NAME L3)
----dived line----
 LABEL L6
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#5
, dst=0x557100e370c0, src=(nil)
result=MOV 102,#5

a format: assem=STR 's0,['d0,#-4]
, dst=0x557100e372d0, src=0x557100e37130
result=STR 102,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x557100e37850, src=0x557100e37830
result=LDR 103,[FP,#-4]

a format: assem=MOV 'd0,#5
, dst=0x557100e37ab0, src=(nil)
result=MOV 104,#5

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x557100e37b40
result=CMP 103,104

a format: assem=BEQ L1
, dst=(nil), src=(nil)
result=BEQ L1

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x557100e385a0, src=0x557100e38580
result=LDR 106,[FP,#-4]

a format: assem=MOV 'd0,#2
, dst=0x557100e38800, src=(nil)
result=MOV 107,#2

a format: assem=MUL 'd0,'s0,'s1
, dst=0x557100e388b0, src=0x557100e38890
result=MUL 105,106,107

a format: assem=STR 's0,['d0,#-4]
, dst=0x557100e38ac0, src=0x557100e38920
result=STR 105,[FP,#-4]

a format: assem=L3:
, dst=(nil), src=(nil)
result=L3:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x557100e39210, src=0x557100e391f0
result=LDR 108,[FP,#-4]

a format: assem=MOV 'd0, 's0
, dst=0x557100e392a0, src=0x557100e39280
result=MOV RV, 108

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=MOV 'd0,#25
, dst=0x557100e39a40, src=(nil)
result=MOV 109,#25

a format: assem=STR 's0,['d0,#-4]
, dst=0x557100e39c50, src=0x557100e39ab0
result=STR 109,[FP,#-4]

a format: assem=B L3
, dst=(nil), src=(nil)
result=B L3

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

BEGIN L4
L4:
BL L0
MOV `d0, `s0
B L5
L5:

END L4

BEGIN L0
L0:
MOV 102,#5
STR 102,[FP,#-4]
LDR 103,[FP,#-4]
MOV 104,#5
CMP 103,104
BEQ L1
B L2
L2:
LDR 106,[FP,#-4]
MOV 107,#2
MUL 105,106,107
STR 105,[FP,#-4]
L3:
LDR 108,[FP,#-4]
MOV RV, 108
B L6
L1:
MOV 109,#25
STR 109,[FP,#-4]
B L3
L6:

END L0

