
before semantic ast:
 decList(
  functionDec(deepWhileBr,
   fieldList(
    field(a,
     int,
     expList(),
     FALSE,
    fieldList(
     field(b,
      int,
      expList(),
      FALSE,
     fieldList())),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(c,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(c),
        opExp(
         add,
         varExp(
          simpleVar(a)),
         varExp(
          simpleVar(b))))),
      comStmList(
       comStm(
        whileStm(
         opExp(
          lt,
          varExp(
           simpleVar(c)),
          intExp(75)),
         blockStm(
          comStmList(
           comStm(
            decList(
             variableDec(d,
              int,
              FALSE),
             decList()),),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(42))),
            comStmList(
             comStm(
              ifStm(
               opExp(
                lt,
                varExp(
                 simpleVar(c)),
                intExp(100)),
               blockStm(
                comStmList(
                 comStm(
                  assignStm(
                   simpleVar(c),
                   opExp(
                    add,
                    varExp(
                     simpleVar(c)),
                    varExp(
                     simpleVar(d))))),
                 comStmList(
                  comStm(
                   ifStm(
                    opExp(
                     gt,
                     varExp(
                      simpleVar(c)),
                     intExp(99)),
                    blockStm(
                     comStmList(
                      comStm(
                       decList(
                        variableDec(e,
                         int,
                         FALSE),
                        decList()),),
                      comStmList(
                       comStm(
                        assignStm(
                         simpleVar(e),
                         opExp(
                          mul,
                          varExp(
                           simpleVar(d)),
                          intExp(2)))),
                       comStmList(
                        comStm(
                         ifStm(
                          opExp(
                           eq,
                           intExp(1),
                           intExp(1)),
                          blockStm(
                           comStmList(
                            comStm(
                             assignStm(
                              simpleVar(c),
                              opExp(
                               mul,
                               varExp(
                                simpleVar(e)),
                               intExp(2)))),
                            comStmList()))                          )),
                        comStmList()))))                    )),
                  comStmList())))               )),
             comStmList())))))
),
       comStmList(
        comStm(
         returnStm(
          varExp(
           simpleVar(c)))),
        comStmList())))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(p,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        assignStm(
         simpleVar(p),
         intExp(2))),
       comStmList(
        comStm(
         returnStm(
          callExp(deepWhileBr,
           expList(
            varExp(
             simpleVar(p)),
            expList(
             varExp(
              simpleVar(p)),
             expList()))))),
        comStmList()))))),
   decList()))

after semantic ast:
 decList(
  functionDec(deepWhileBr,
   fieldList(
    field(a,
     int,
     expList(),
     FALSE,
    fieldList(
     field(b,
      int,
      expList(),
      FALSE,
     fieldList())),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       variableDec(c,
        int,
        FALSE),
       decList()),),
     comStmList(
      comStm(
       assignStm(
        simpleVar(c),
        opExp(
         add,
         varExp(
          simpleVar(a)),
         varExp(
          simpleVar(b))))),
      comStmList(
       comStm(
        whileStm(
         opExp(
          lt,
          varExp(
           simpleVar(c)),
          intExp(75)),
         blockStm(
          comStmList(
           comStm(
            decList(
             variableDec(d,
              int,
              FALSE),
             decList()),),
           comStmList(
            comStm(
             assignStm(
              simpleVar(d),
              intExp(42))),
            comStmList(
             comStm(
              ifStm(
               opExp(
                lt,
                varExp(
                 simpleVar(c)),
                intExp(100)),
               blockStm(
                comStmList(
                 comStm(
                  assignStm(
                   simpleVar(c),
                   opExp(
                    add,
                    varExp(
                     simpleVar(c)),
                    varExp(
                     simpleVar(d))))),
                 comStmList(
                  comStm(
                   ifStm(
                    opExp(
                     gt,
                     varExp(
                      simpleVar(c)),
                     intExp(99)),
                    blockStm(
                     comStmList(
                      comStm(
                       decList(
                        variableDec(e,
                         int,
                         FALSE),
                        decList()),),
                      comStmList(
                       comStm(
                        assignStm(
                         simpleVar(e),
                         opExp(
                          mul,
                          varExp(
                           simpleVar(d)),
                          intExp(2)))),
                       comStmList(
                        comStm(
                         ifStm(
                          intExp(1),
                          blockStm(
                           comStmList(
                            comStm(
                             assignStm(
                              simpleVar(c),
                              opExp(
                               mul,
                               varExp(
                                simpleVar(e)),
                               intExp(2)))),
                            comStmList()))                          )),
                        comStmList()))))                    )),
                  comStmList())))               )),
             comStmList())))))
),
       comStmList(
        comStm(
         returnStm(
          varExp(
           simpleVar(c)))),
        comStmList())))))),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(p,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        assignStm(
         simpleVar(p),
         intExp(2))),
       comStmList(
        comStm(
         returnStm(
          callExp(deepWhileBr,
           expList(
            varExp(
             simpleVar(p)),
            expList(
             varExp(
              simpleVar(p)),
             expList()))))),
        comStmList()))))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L12,
  SEQ(
   SEQ(
    EXP(
     CONST 0),
    MOVE(
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -4)),
     CONST 2)),
   MOVE(
    TEMP tRV,
    CALL(
     NAME L0,
      TEMP tFP,
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)),
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)))))) SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     EXP(
      CONST 0),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)),
      BINOP(T_add,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST 4)),
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST 4))))),
    SEQ(
     LABEL L2,
     SEQ(
      CJUMP(T_lt,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -4)),
       CONST 75,
       L11,L1),
      SEQ(
       LABEL L11,
       SEQ(
        SEQ(
         SEQ(
          EXP(
           CONST 0),
          MOVE(
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -8)),
           CONST 42)),
         SEQ(
          SEQ(
           CJUMP(T_lt,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -4)),
            CONST 100,
            L9,L10),
           SEQ(
            LABEL L9,
            SEQ(
             MOVE(
              MEM(
               BINOP(T_add,
                TEMP tFP,
                CONST -4)),
              BINOP(T_add,
               MEM(
                BINOP(T_add,
                 TEMP tFP,
                 CONST -4)),
               MEM(
                BINOP(T_add,
                 TEMP tFP,
                 CONST -8)))),
             SEQ(
              SEQ(
               CJUMP(T_gt,
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -4)),
                CONST 99,
                L7,L8),
               SEQ(
                LABEL L7,
                SEQ(
                 SEQ(
                  EXP(
                   CONST 0),
                  MOVE(
                   MEM(
                    BINOP(T_add,
                     TEMP tFP,
                     CONST -12)),
                   BINOP(T_mul,
                    MEM(
                     BINOP(T_add,
                      TEMP tFP,
                      CONST -8)),
                    CONST 2))),
                 SEQ(
                  SEQ(
                   CJUMP(T_eq,
                    CONST 1,
                    CONST 1,
                    L5,L6),
                   SEQ(
                    LABEL L5,
                    MOVE(
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -4)),
                     BINOP(T_mul,
                      MEM(
                       BINOP(T_add,
                        TEMP tFP,
                        CONST -12)),
                      CONST 2)))),
                  LABEL L6)))),
              LABEL L8)))),
          LABEL L10)),
        SEQ(
         JUMP(
          NAME L2),
         LABEL L1)))))),
   MOVE(
    TEMP tRV,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -4)))))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L12
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 2)
----dived line----
 MOVE(
  TEMP tRV,
  CALL(
   NAME L0,
    TEMP tFP,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -4)),
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -4))))
----dived line----
 JUMP(
  NAME L13)
----dived line----
 LABEL L13
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L12:
, dst=(nil), src=(nil)
result=L12:

a format: assem=MOV 'd0,#2
, dst=0x55f49bdc9470, src=(nil)
result=MOV 103,#2

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f49bdc9680, src=0x55f49bdc94e0
result=STR 103,[FP,#-4]

a format: assem=BL L0
, dst=0x55f49bdc9920, src=(nil)
result=BL L0

a format: assem=MOV `d0, `s0
, dst=0x55f49bdc99b0, src=0x55f49bdc9990
result=MOV `d0, `s0

a format: assem=B L13
, dst=(nil), src=(nil)
result=B L13

a format: assem=L13:
, dst=(nil), src=(nil)
result=L13:


↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST 4)),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST 4))))
----dived line----
 LABEL L2
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 75,
  L11,L1)
----dived line----
 LABEL L1
----dived line----
 MOVE(
  TEMP tRV,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)))
----dived line----
 JUMP(
  NAME L14)
----dived line----
 LABEL L11
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 42)
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 100,
  L9,L10)
----dived line----
 LABEL L10
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L9
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8))))
----dived line----
 CJUMP(T_gt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 99,
  L7,L8)
----dived line----
 LABEL L8
----dived line----
 JUMP(
  NAME L10)
----dived line----
 LABEL L7
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  BINOP(T_mul,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   CONST 2))
----dived line----
 CJUMP(T_eq,
  CONST 1,
  CONST 1,
  L5,L6)
----dived line----
 LABEL L6
----dived line----
 JUMP(
  NAME L8)
----dived line----
 LABEL L5
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_mul,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12)),
   CONST 2))
----dived line----
 JUMP(
  NAME L6)
----dived line----
 LABEL L14
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=LDR 'd0,['s0,#4]
, dst=0x55f49bdcefe0, src=0x55f49bdcefc0
result=LDR 106,[FP,#4]

a format: assem=LDR 'd0,['s0,#4]
, dst=0x55f49bdcf3e0, src=0x55f49bdcf3c0
result=LDR 107,[FP,#4]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55f49bdcf490, src=0x55f49bdcf470
result=ADD 105,106,107

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f49bdcf6a0, src=0x55f49bdcf500
result=STR 105,[FP,#-4]

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f49bdcfdf0, src=0x55f49bdcfdd0
result=LDR 108,[FP,#-4]

a format: assem=MOV 'd0,#75
, dst=0x55f49bdd0050, src=(nil)
result=MOV 109,#75

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f49bdd00e0
result=CMP 108,109

a format: assem=BLT L11
, dst=(nil), src=(nil)
result=BLT L11

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f49bdd0950, src=0x55f49bdd0930
result=LDR 110,[FP,#-4]

a format: assem=MOV 'd0, 's0
, dst=0x55f49bdd09e0, src=0x55f49bdd09c0
result=MOV RV, 110

a format: assem=B L14
, dst=(nil), src=(nil)
result=B L14

a format: assem=L11:
, dst=(nil), src=(nil)
result=L11:

a format: assem=MOV 'd0,#42
, dst=0x55f49bdd1180, src=(nil)
result=MOV 111,#42

a format: assem=STR 's0,['d0,#-8]
, dst=0x55f49bdd1390, src=0x55f49bdd11f0
result=STR 111,[FP,#-8]

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f49bdd1910, src=0x55f49bdd18f0
result=LDR 112,[FP,#-4]

a format: assem=MOV 'd0,#100
, dst=0x55f49bdd1b70, src=(nil)
result=MOV 113,#100

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f49bdd1c00
result=CMP 112,113

a format: assem=BLT L9
, dst=(nil), src=(nil)
result=BLT L9

a format: assem=B L10
, dst=(nil), src=(nil)
result=B L10

a format: assem=L10:
, dst=(nil), src=(nil)
result=L10:

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L9:
, dst=(nil), src=(nil)
result=L9:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f49bdd2a20, src=0x55f49bdd2a00
result=LDR 115,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f49bdd2e20, src=0x55f49bdd2e00
result=LDR 116,[FP,#-8]

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55f49bdd2ed0, src=0x55f49bdd2eb0
result=ADD 114,115,116

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f49bdd30e0, src=0x55f49bdd2f40
result=STR 114,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55f49bdd3660, src=0x55f49bdd3640
result=LDR 117,[FP,#-4]

a format: assem=MOV 'd0,#99
, dst=0x55f49bdd38c0, src=(nil)
result=MOV 118,#99

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f49bdd3950
result=CMP 117,118

a format: assem=BGT L7
, dst=(nil), src=(nil)
result=BGT L7

a format: assem=B L8
, dst=(nil), src=(nil)
result=B L8

a format: assem=L8:
, dst=(nil), src=(nil)
result=L8:

a format: assem=B L10
, dst=(nil), src=(nil)
result=B L10

a format: assem=L7:
, dst=(nil), src=(nil)
result=L7:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55f49bdd4770, src=0x55f49bdd4750
result=LDR 120,[FP,#-8]

a format: assem=MOV 'd0,#2
, dst=0x55f49bdd49d0, src=(nil)
result=MOV 121,#2

BEGIN L12
L12:
MOV 103,#2
STR 103,[FP,#-4]
BL L0
MOV `d0, `s0
B L13
L13:

END L12

BEGIN L0
L0:
LDR 106,[FP,#4]
LDR 107,[FP,#4]
ADD 105,106,107
STR 105,[FP,#-4]
L2:
LDR 108,[FP,#-4]
MOV 109,#75
CMP 108,109
BLT L11
B L1
L1:
LDR 110,[FP,#-4]
MOV RV, 110
B L14
L11:
MOV 111,#42
STR 111,[FP,#-8]
LDR 112,[FP,#-4]
MOV 113,#100
CMP 112,113
BLT L9
B L10
L10:
B L2
L9:
LDR 115,[FP,#-4]
LDR 116,[FP,#-8]
ADD 114,115,116
STR 114,[FP,#-4]
LDR 117,[FP,#-4]
MOV 118,#99
CMP 117,118
BGT L7
B L8
L8:
B L10
L7:
LDR 120,[FP,#-8]
a format: assem=MUL 'd0,'s0,'s1
, dst=0x55f49bdd4a80, src=0x55f49bdd4a60
result=MUL 119,120,121

a format: assem=STR 's0,['d0,#-12]
, dst=0x55f49bdd4c90, src=0x55f49bdd4af0
result=STR 119,[FP,#-12]

a format: assem=MOV 'd0,#1
, dst=0x55f49bdd5070, src=(nil)
result=MOV 122,#1

a format: assem=MOV 'd0,#1
, dst=0x55f49bdd52d0, src=(nil)
result=MOV 123,#1

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55f49bdd5360
result=CMP 122,123

a format: assem=BEQ L5
, dst=(nil), src=(nil)
result=BEQ L5

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=B L8
, dst=(nil), src=(nil)
result=B L8

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55f49bdd6180, src=0x55f49bdd6160
result=LDR 125,[FP,#-12]

a format: assem=MOV 'd0,#2
, dst=0x55f49bdd63e0, src=(nil)
result=MOV 126,#2

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55f49bdd6490, src=0x55f49bdd6470
result=MUL 124,125,126

a format: assem=STR 's0,['d0,#-4]
, dst=0x55f49bdd66a0, src=0x55f49bdd6500
result=STR 124,[FP,#-4]

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L14:
, dst=(nil), src=(nil)
result=L14:

MOV 121,#2
MUL 119,120,121
STR 119,[FP,#-12]
MOV 122,#1
MOV 123,#1
CMP 122,123
BEQ L5
B L6
L6:
B L8
L5:
LDR 125,[FP,#-12]
MOV 126,#2
MUL 124,125,126
STR 124,[FP,#-4]
B L6
L14:

END L0

