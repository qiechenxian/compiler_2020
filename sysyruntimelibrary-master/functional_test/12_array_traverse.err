
before semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(3),
    expList(
     intExp(4),
     expList())),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(i,
         int,
         intExp(0),
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(cnt,
          int,
          intExp(0),
          FALSE),
         decList()),),
       comStmList(
        comStm(
         whileStm(
          opExp(
           le,
           varExp(
            simpleVar(i)),
           opExp(
            sub,
            opExp(
             add,
             intExp(3),
             intExp(4)),
            intExp(2))),
          blockStm(
           comStmList(
            comStm(
             decList(
              variableDec(j,
               int,
               varExp(
                simpleVar(i)),
               FALSE),
              decList()),),
            comStmList(
             comStm(
              whileStm(
               opExp(
                ge,
                varExp(
                 simpleVar(j)),
                intExp(0)),
               blockStm(
                comStmList(
                 comStm(
                  ifStm(
                   opExp(
                    or,
                    opExp(
                     lt,
                     varExp(
                      simpleVar(j)),
                     intExp(4)),
                    opExp(
                     lt,
                     opExp(
                      sub,
                      varExp(
                       simpleVar(i)),
                      varExp(
                       simpleVar(j))),
                     intExp(3))),
                   blockStm(
                    comStmList(
                     comStm(
                      assignStm(
                       arrayVar(
                        arrayVar(
                         simpleVar(a),
                         opExp(
                          sub,
                          varExp(
                           simpleVar(i)),
                          varExp(
                           simpleVar(j)))),
                        varExp(
                         simpleVar(j))),
                       varExp(
                        simpleVar(cnt)))),
                     comStmList(
                      comStm(
                       assignStm(
                        simpleVar(cnt),
                        intExp(1))),
                      comStmList())))                   )),
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(j),
                    opExp(
                     sub,
                     varExp(
                      simpleVar(j)),
                     intExp(1)))),
                  comStmList()))))
),
             comStmList(
              comStm(
               assignStm(
                simpleVar(i),
                opExp(
                 add,
                 varExp(
                  simpleVar(i)),
                 intExp(1)))),
              comStmList())))))
),
        comStmList(
         comStm(
          returnStm(
           intExp(0))),
         comStmList())))))),
   decList()))

after semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(3),
    expList(
     intExp(4),
     expList())),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(i,
         int,
         intExp(0),
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(cnt,
          int,
          intExp(0),
          FALSE),
         decList()),),
       comStmList(
        comStm(
         whileStm(
          opExp(
           le,
           varExp(
            simpleVar(i)),
           intExp(5)),
          blockStm(
           comStmList(
            comStm(
             decList(
              variableDec(j,
               int,
               varExp(
                simpleVar(i)),
               FALSE),
              decList()),),
            comStmList(
             comStm(
              whileStm(
               opExp(
                ge,
                varExp(
                 simpleVar(j)),
                intExp(0)),
               blockStm(
                comStmList(
                 comStm(
                  ifStm(
                   opExp(
                    or,
                    opExp(
                     lt,
                     varExp(
                      simpleVar(j)),
                     intExp(4)),
                    opExp(
                     lt,
                     opExp(
                      sub,
                      varExp(
                       simpleVar(i)),
                      varExp(
                       simpleVar(j))),
                     intExp(3))),
                   blockStm(
                    comStmList(
                     comStm(
                      assignStm(
                       arrayVar(
                        arrayVar(
                         simpleVar(a),
                         opExp(
                          sub,
                          varExp(
                           simpleVar(i)),
                          varExp(
                           simpleVar(j)))),
                        varExp(
                         simpleVar(j))),
                       varExp(
                        simpleVar(cnt)))),
                     comStmList(
                      comStm(
                       assignStm(
                        simpleVar(cnt),
                        intExp(1))),
                      comStmList())))                   )),
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(j),
                    opExp(
                     sub,
                     varExp(
                      simpleVar(j)),
                     intExp(1)))),
                  comStmList()))))
),
             comStmList(
              comStm(
               assignStm(
                simpleVar(i),
                opExp(
                 add,
                 varExp(
                  simpleVar(i)),
                 intExp(1)))),
              comStmList())))))
),
        comStmList(
         comStm(
          returnStm(
           intExp(0))),
         comStmList())))))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -4)),
      CONST 0),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -8)),
      CONST 0)),
    SEQ(
     LABEL L2,
     SEQ(
      CJUMP(T_le,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -4)),
       BINOP(T_sub,
        BINOP(T_add,
         CONST 3,
         CONST 4),
        CONST 2),
       L13,L1),
      SEQ(
       LABEL L13,
       SEQ(
        SEQ(
         SEQ(
          MOVE(
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -12)),
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4))),
          SEQ(
           LABEL L6,
           SEQ(
            CJUMP(T_ge,
             MEM(
              BINOP(T_add,
               TEMP tFP,
               CONST -12)),
             CONST 0,
             L12,L5),
            SEQ(
             LABEL L12,
             SEQ(
              SEQ(
               SEQ(
                SEQ(
                 SEQ(
                  CJUMP(T_lt,
                   MEM(
                    BINOP(T_add,
                     TEMP tFP,
                     CONST -12)),
                   CONST 4,
                   L10,L9),
                  SEQ(
                   LABEL L9,
                   CJUMP(T_lt,
                    BINOP(T_sub,
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -4)),
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -12))),
                    CONST 3,
                    L10,L11))),
                 SEQ(
                  LABEL L10,
                  SEQ(
                   MOVE(
                    MEM(
                     BINOP(T_add,
                      BINOP(T_add,
                       NAME a,
                       BINOP(T_mul,
                        BINOP(T_sub,
                         MEM(
                          BINOP(T_add,
                           TEMP tFP,
                           CONST -4)),
                         MEM(
                          BINOP(T_add,
                           TEMP tFP,
                           CONST -12))),
                        CONST 16)),
                      BINOP(T_mul,
                       MEM(
                        BINOP(T_add,
                         TEMP tFP,
                         CONST -12)),
                       CONST 4))),
                    MEM(
                     BINOP(T_add,
                      TEMP tFP,
                      CONST -8))),
                   MOVE(
                    MEM(
                     BINOP(T_add,
                      TEMP tFP,
                      CONST -8)),
                    CONST 1)))),
                LABEL L11),
               MOVE(
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -12)),
                BINOP(T_sub,
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -12)),
                 CONST 1))),
              SEQ(
               JUMP(
                NAME L6),
               LABEL L5)))))),
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -4)),
          BINOP(T_add,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -4)),
           CONST 1))),
        SEQ(
         JUMP(
          NAME L2),
         LABEL L1)))))),
   MOVE(
    TEMP tRV,
    CONST 0)))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 0)
----dived line----
 LABEL L2
----dived line----
 CJUMP(T_le,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_sub,
   BINOP(T_add,
    CONST 3,
    CONST 4),
   CONST 2),
  L13,L1)
----dived line----
 LABEL L1
----dived line----
 MOVE(
  TEMP tRV,
  CONST 0)
----dived line----
 JUMP(
  NAME L14)
----dived line----
 LABEL L13
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)))
----dived line----
 LABEL L6
----dived line----
 CJUMP(T_ge,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 0,
  L12,L5)
----dived line----
 LABEL L5
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   CONST 1))
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L12
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 4,
  L10,L9)
----dived line----
 LABEL L9
----dived line----
 CJUMP(T_lt,
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12))),
  CONST 3,
  L10,L11)
----dived line----
 LABEL L11
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  BINOP(T_sub,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12)),
   CONST 1))
----dived line----
 JUMP(
  NAME L6)
----dived line----
 LABEL L10
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    BINOP(T_add,
     NAME a,
     BINOP(T_mul,
      BINOP(T_sub,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -4)),
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -12))),
      CONST 16)),
    BINOP(T_mul,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -12)),
     CONST 4))),
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 1)
----dived line----
 JUMP(
  NAME L11)
----dived line----
 LABEL L14
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#0
, dst=0x55ba98d44d90, src=(nil)
result=MOV 101,#0

a format: assem=STR 's0,['d0,#-4]
, dst=0x55ba98d44fa0, src=0x55ba98d44e00
result=STR 101,[FP,#-4]

a format: assem=MOV 'd0,#0
, dst=0x55ba98d45380, src=(nil)
result=MOV 102,#0

a format: assem=STR 's0,['d0,#-8]
, dst=0x55ba98d45590, src=0x55ba98d453f0
result=STR 102,[FP,#-8]

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d45ce0, src=0x55ba98d45cc0
result=LDR 103,[FP,#-4]

a format: assem=MOV 'd0,#3
, dst=0x55ba98d46320, src=(nil)
result=MOV 106,#3

a format: assem=ADD 'd0,'s0,4
, dst=0x55ba98d463b0, src=0x55ba98d46390
result=ADD 105,106,4

a format: assem=SUB 'd0,'s0,2
, dst=0x55ba98d46440, src=0x55ba98d46420
result=SUB 104,105,2

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55ba98d464d0
result=CMP 103,104

a format: assem=BLE L13
, dst=(nil), src=(nil)
result=BLE L13

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=MOV 'd0,#0
, dst=0x55ba98d46ba0, src=(nil)
result=MOV 107,#0

a format: assem=MOV 'd0, 's0
, dst=0x55ba98d46c30, src=0x55ba98d46c10
result=MOV RV, 107

a format: assem=B L14
, dst=(nil), src=(nil)
result=B L14

a format: assem=L13:
, dst=(nil), src=(nil)
result=L13:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d47570, src=0x55ba98d47550
result=LDR 108,[FP,#-4]

a format: assem=STR 's0,['d0,#-12]
, dst=0x55ba98d47780, src=0x55ba98d475e0
result=STR 108,[FP,#-12]

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d47ed0, src=0x55ba98d47eb0
result=LDR 109,[FP,#-12]

a format: assem=MOV 'd0,#0
, dst=0x55ba98d48130, src=(nil)
result=MOV 110,#0

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55ba98d481c0
result=CMP 109,110

a format: assem=BGE L12
, dst=(nil), src=(nil)
result=BGE L12

a format: assem=B L5
, dst=(nil), src=(nil)
result=B L5

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d48c20, src=0x55ba98d48c00
result=LDR 112,[FP,#-4]

a format: assem=ADD 'd0,'s0,1
, dst=0x55ba98d48cb0, src=0x55ba98d48c90
result=ADD 111,112,1

a format: assem=STR 's0,['d0,#-4]
, dst=0x55ba98d48ec0, src=0x55ba98d48d20
result=STR 111,[FP,#-4]

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L12:
, dst=(nil), src=(nil)
result=L12:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d49800, src=0x55ba98d497e0
result=LDR 113,[FP,#-12]

a format: assem=MOV 'd0,#4
, dst=0x55ba98d49a60, src=(nil)
result=MOV 114,#4

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55ba98d49af0
result=CMP 113,114

a format: assem=BLT L10
, dst=(nil), src=(nil)
result=BLT L10

a format: assem=B L9
, dst=(nil), src=(nil)
result=B L9

a format: assem=L9:
, dst=(nil), src=(nil)
result=L9:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d4a550, src=0x55ba98d4a530
result=LDR 116,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d4a950, src=0x55ba98d4a930
result=LDR 117,[FP,#-12]

a format: assem=SUB 'd0,'s0,'s1
, dst=0x55ba98d4aa00, src=0x55ba98d4a9e0
result=SUB 115,116,117

a format: assem=MOV 'd0,#3
, dst=0x55ba98d4ac60, src=(nil)
result=MOV 118,#3

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55ba98d4acf0
result=CMP 115,118

a format: assem=BLT L10
, dst=(nil), src=(nil)
result=BLT L10

a format: assem=B L11
, dst=(nil), src=(nil)
result=B L11

a format: assem=L11:
, dst=(nil), src=(nil)
result=L11:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d4b750, src=0x55ba98d4b730
result=LDR 120,[FP,#-12]

BEGIN L0
L0:
MOV 101,#0
STR 101,[FP,#-4]
MOV 102,#0
STR 102,[FP,#-8]
L2:
LDR 103,[FP,#-4]
MOV 106,#3
ADD 105,106,4
SUB 104,105,2
CMP 103,104
BLE L13
B L1
L1:
MOV 107,#0
MOV RV, 107
B L14
L13:
LDR 108,[FP,#-4]
STR 108,[FP,#-12]
L6:
LDR 109,[FP,#-12]
MOV 110,#0
CMP 109,110
BGE L12
B L5
L5:
LDR 112,[FP,#-4]
ADD 111,112,1
STR 111,[FP,#-4]
B L2
L12:
LDR 113,[FP,#-12]
MOV 114,#4
CMP 113,114
BLT L10
B L9
L9:
LDR 116,[FP,#-4]
LDR 117,[FP,#-12]
SUB 115,116,117
MOV 118,#3
CMP 115,118
BLT L10
B L11
L11:
LDR 120,[FP,#-a format: assem=SUB 'd0,'s0,1
, dst=0x55ba98d4b7e0, src=0x55ba98d4b7c0
result=SUB 119,120,1

a format: assem=STR 's0,['d0,#-12]
, dst=0x55ba98d4b9f0, src=0x55ba98d4b850
result=STR 119,[FP,#-12]

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L10:
, dst=(nil), src=(nil)
result=L10:

a format: assem=MOV a,'d0
, dst=0x55ba98d4c5e0, src=(nil)
result=MOV a,124

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d4cdc0, src=0x55ba98d4cda0
result=LDR 127,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d4d1c0, src=0x55ba98d4d1a0
result=LDR 128,[FP,#-12]

a format: assem=SUB 'd0,'s0,'s1
, dst=0x55ba98d4d270, src=0x55ba98d4d250
result=SUB 126,127,128

a format: assem=MOV 'd0,#16
, dst=0x55ba98d4d4d0, src=(nil)
result=MOV 129,#16

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55ba98d4d580, src=0x55ba98d4d560
result=MUL 125,126,129

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55ba98d4d630, src=0x55ba98d4d610
result=ADD 123,124,125

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d4dc20, src=0x55ba98d4dc00
result=LDR 131,[FP,#-12]

a format: assem=MOV 'd0,#4
, dst=0x55ba98d4de80, src=(nil)
result=MOV 132,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55ba98d4df30, src=0x55ba98d4df10
result=MUL 130,131,132

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55ba98d4dfe0, src=0x55ba98d4dfc0
result=ADD 122,123,130

a format: assem=ADD 'd0,'s0,-8
, dst=0x55ba98d4e3e0, src=0x55ba98d4e3c0
result=ADD 133,FP,-8

a format: assem=LDR 'd0,['s0]
, dst=0x55ba98d4e470, src=0x55ba98d4e450
result=LDR 121,[133]

a format: assem=MOV a,'d0
, dst=0x55ba98d4eab0, src=(nil)
result=MOV a,136

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55ba98d4f290, src=0x55ba98d4f270
result=LDR 139,[FP,#-4]

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d4f690, src=0x55ba98d4f670
result=LDR 140,[FP,#-12]

a format: assem=SUB 'd0,'s0,'s1
, dst=0x55ba98d4f740, src=0x55ba98d4f720
result=SUB 138,139,140

a format: assem=MOV 'd0,#16
, dst=0x55ba98d4f9a0, src=(nil)
result=MOV 141,#16

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55ba98d4fa50, src=0x55ba98d4fa30
result=MUL 137,138,141

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55ba98d4fb00, src=0x55ba98d4fae0
result=ADD 135,136,137

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55ba98d500f0, src=0x55ba98d500d0
result=LDR 143,[FP,#-12]

a format: assem=MOV 'd0,#4
, dst=0x55ba98d50350, src=(nil)
result=MOV 144,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55ba98d50400, src=0x55ba98d503e0
result=MUL 142,143,144

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55ba98d504b0, src=0x55ba98d50490
result=ADD 134,135,142

a format: assem=STR 's0,['s1]
, dst=(nil), src=0x55ba98d50540
result=STR 121,[134]

a format: assem=MOV 'd0,#1
, dst=0x55ba98d50920, src=(nil)
result=MOV 145,#1

a format: assem=STR 's0,['d0,#-8]
, dst=0x55ba98d50b30, src=0x55ba98d50990
result=STR 145,[FP,#-8]

a format: assem=B L11
, dst=(nil), src=(nil)
result=B L11

a format: assem=L14:
, dst=(nil), src=(nil)
result=L14:

12]
SUB 119,120,1
STR 119,[FP,#-12]
B L6
L10:
MOV a,124
LDR 127,[FP,#-4]
LDR 128,[FP,#-12]
SUB 126,127,128
MOV 129,#16
MUL 125,126,129
ADD 123,124,125
LDR 131,[FP,#-12]
MOV 132,#4
MUL 130,131,132
ADD 122,123,130
ADD 133,FP,-8
LDR 121,[133]
MOV a,136
LDR 139,[FP,#-4]
LDR 140,[FP,#-12]
SUB 138,139,140
MOV 141,#16
MUL 137,138,141
ADD 135,136,137
LDR 143,[FP,#-12]
MOV 144,#4
MUL 142,143,144
ADD 134,135,142
STR 121,[134]
MOV 145,#1
STR 145,[FP,#-8]
B L11
L14:

END L0

