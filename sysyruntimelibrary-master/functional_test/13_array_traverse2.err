
before semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(3),
    expList(
     intExp(3),
     expList(
      intExp(3),
      expList()))),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(k,
         int,
         FALSE),
        decList(
         variableDec(j,
          int,
          FALSE),
         decList(
          variableDec(i,
           int,
           FALSE),
          decList()))),),
      comStmList(
       comStm(
        assignStm(
         simpleVar(i),
         intExp(0))),
       comStmList(
        comStm(
         assignStm(
          simpleVar(j),
          intExp(0))),
        comStmList(
         comStm(
          assignStm(
           simpleVar(k),
           intExp(0))),
         comStmList(
          comStm(
           decList(
            variableDec(cnt,
             int,
             intExp(0),
             FALSE),
            decList()),),
          comStmList(
           comStm(
            whileStm(
             opExp(
              lt,
              varExp(
               simpleVar(i)),
              intExp(3)),
             blockStm(
              comStmList(
               comStm(
                whileStm(
                 opExp(
                  lt,
                  varExp(
                   simpleVar(j)),
                  intExp(3)),
                 blockStm(
                  comStmList(
                   comStm(
                    whileStm(
                     opExp(
                      lt,
                      varExp(
                       simpleVar(k)),
                      intExp(3)),
                     blockStm(
                      comStmList(
                       comStm(
                        assignStm(
                         arrayVar(
                          arrayVar(
                           arrayVar(
                            simpleVar(a),
                            varExp(
                             simpleVar(i))),
                           varExp(
                            simpleVar(j))),
                          varExp(
                           simpleVar(k))),
                         varExp(
                          simpleVar(cnt)))),
                       comStmList(
                        comStm(
                         assignStm(
                          simpleVar(cnt),
                          opExp(
                           add,
                           varExp(
                            simpleVar(cnt)),
                           intExp(1)))),
                        comStmList(
                         comStm(
                          assignStm(
                           simpleVar(k),
                           opExp(
                            add,
                            varExp(
                             simpleVar(k)),
                            intExp(1)))),
                         comStmList())))))
),
                   comStmList(
                    comStm(
                     assignStm(
                      simpleVar(j),
                      opExp(
                       add,
                       varExp(
                        simpleVar(j)),
                       intExp(1)))),
                    comStmList()))))
),
               comStmList(
                comStm(
                 assignStm(
                  simpleVar(i),
                  opExp(
                   add,
                   varExp(
                    simpleVar(i)),
                   intExp(1)))),
                comStmList()))))
),
           comStmList(
            comStm(
             returnStm(
              intExp(0))),
            comStmList()))))))))),
   decList()))

after semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(3),
    expList(
     intExp(3),
     expList(
      intExp(3),
      expList()))),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       decList(
        variableDec(k,
         int,
         FALSE),
        decList(
         variableDec(j,
          int,
          FALSE),
         decList(
          variableDec(i,
           int,
           FALSE),
          decList()))),),
      comStmList(
       comStm(
        assignStm(
         simpleVar(i),
         intExp(0))),
       comStmList(
        comStm(
         assignStm(
          simpleVar(j),
          intExp(0))),
        comStmList(
         comStm(
          assignStm(
           simpleVar(k),
           intExp(0))),
         comStmList(
          comStm(
           decList(
            variableDec(cnt,
             int,
             intExp(0),
             FALSE),
            decList()),),
          comStmList(
           comStm(
            whileStm(
             opExp(
              lt,
              varExp(
               simpleVar(i)),
              intExp(3)),
             blockStm(
              comStmList(
               comStm(
                whileStm(
                 opExp(
                  lt,
                  varExp(
                   simpleVar(j)),
                  intExp(3)),
                 blockStm(
                  comStmList(
                   comStm(
                    whileStm(
                     opExp(
                      lt,
                      varExp(
                       simpleVar(k)),
                      intExp(3)),
                     blockStm(
                      comStmList(
                       comStm(
                        assignStm(
                         arrayVar(
                          arrayVar(
                           arrayVar(
                            simpleVar(a),
                            varExp(
                             simpleVar(i))),
                           varExp(
                            simpleVar(j))),
                          varExp(
                           simpleVar(k))),
                         varExp(
                          simpleVar(cnt)))),
                       comStmList(
                        comStm(
                         assignStm(
                          simpleVar(cnt),
                          opExp(
                           add,
                           varExp(
                            simpleVar(cnt)),
                           intExp(1)))),
                        comStmList(
                         comStm(
                          assignStm(
                           simpleVar(k),
                           opExp(
                            add,
                            varExp(
                             simpleVar(k)),
                            intExp(1)))),
                         comStmList())))))
),
                   comStmList(
                    comStm(
                     assignStm(
                      simpleVar(j),
                      opExp(
                       add,
                       varExp(
                        simpleVar(j)),
                       intExp(1)))),
                    comStmList()))))
),
               comStmList(
                comStm(
                 assignStm(
                  simpleVar(i),
                  opExp(
                   add,
                   varExp(
                    simpleVar(i)),
                   intExp(1)))),
                comStmList()))))
),
           comStmList(
            comStm(
             returnStm(
              intExp(0))),
            comStmList()))))))))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        SEQ(
         SEQ(
          EXP(
           CONST 0),
          EXP(
           CONST 0)),
         EXP(
          CONST 0)),
        MOVE(
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -12)),
         CONST 0)),
       MOVE(
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -8)),
        CONST 0)),
      MOVE(
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -4)),
       CONST 0)),
     MOVE(
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -16)),
      CONST 0)),
    SEQ(
     LABEL L2,
     SEQ(
      CJUMP(T_lt,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -12)),
       CONST 3,
       L15,L1),
      SEQ(
       LABEL L15,
       SEQ(
        SEQ(
         SEQ(
          LABEL L6,
          SEQ(
           CJUMP(T_lt,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -8)),
            CONST 3,
            L14,L5),
           SEQ(
            LABEL L14,
            SEQ(
             SEQ(
              SEQ(
               LABEL L10,
               SEQ(
                CJUMP(T_lt,
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -4)),
                 CONST 3,
                 L13,L9),
                SEQ(
                 LABEL L13,
                 SEQ(
                  SEQ(
                   SEQ(
                    MOVE(
                     MEM(
                      BINOP(T_add,
                       BINOP(T_add,
                        BINOP(T_add,
                         NAME a,
                         BINOP(T_mul,
                          MEM(
                           BINOP(T_add,
                            TEMP tFP,
                            CONST -12)),
                          CONST 36)),
                        BINOP(T_mul,
                         MEM(
                          BINOP(T_add,
                           TEMP tFP,
                           CONST -8)),
                         CONST 12)),
                       BINOP(T_mul,
                        MEM(
                         BINOP(T_add,
                          TEMP tFP,
                          CONST -4)),
                        CONST 4))),
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -16))),
                    MOVE(
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -16)),
                     BINOP(T_add,
                      MEM(
                       BINOP(T_add,
                        TEMP tFP,
                        CONST -16)),
                      CONST 1))),
                   MOVE(
                    MEM(
                     BINOP(T_add,
                      TEMP tFP,
                      CONST -4)),
                    BINOP(T_add,
                     MEM(
                      BINOP(T_add,
                       TEMP tFP,
                       CONST -4)),
                     CONST 1))),
                  SEQ(
                   JUMP(
                    NAME L10),
                   LABEL L9))))),
              MOVE(
               MEM(
                BINOP(T_add,
                 TEMP tFP,
                 CONST -8)),
               BINOP(T_add,
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -8)),
                CONST 1))),
             SEQ(
              JUMP(
               NAME L6),
              LABEL L5))))),
         MOVE(
          MEM(
           BINOP(T_add,
            TEMP tFP,
            CONST -12)),
          BINOP(T_add,
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -12)),
           CONST 1))),
        SEQ(
         JUMP(
          NAME L2),
         LABEL L1)))))),
   MOVE(
    TEMP tRV,
    CONST 0)))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  CONST 0)
----dived line----
 LABEL L2
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  CONST 3,
  L15,L1)
----dived line----
 LABEL L1
----dived line----
 MOVE(
  TEMP tRV,
  CONST 0)
----dived line----
 JUMP(
  NAME L16)
----dived line----
 LABEL L15
----dived line----
 LABEL L6
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  CONST 3,
  L14,L5)
----dived line----
 LABEL L5
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -12)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -12)),
   CONST 1))
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L14
----dived line----
 LABEL L10
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  CONST 3,
  L13,L9)
----dived line----
 LABEL L9
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -8)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -8)),
   CONST 1))
----dived line----
 JUMP(
  NAME L6)
----dived line----
 LABEL L13
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    BINOP(T_add,
     BINOP(T_add,
      NAME a,
      BINOP(T_mul,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -12)),
       CONST 36)),
     BINOP(T_mul,
      MEM(
       BINOP(T_add,
        TEMP tFP,
        CONST -8)),
      CONST 12)),
    BINOP(T_mul,
     MEM(
      BINOP(T_add,
       TEMP tFP,
       CONST -4)),
     CONST 4))),
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -16)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -16)),
   CONST 1))
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -4)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -4)),
   CONST 1))
----dived line----
 JUMP(
  NAME L10)
----dived line----
 LABEL L16
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#0
, dst=0x55bb13cd2010, src=(nil)
result=MOV 100,#0

a format: assem=STR 's0,['d0,#-12]
, dst=0x55bb13cd2220, src=0x55bb13cd2080
result=STR 100,[FP,#-12]

a format: assem=MOV 'd0,#0
, dst=0x55bb13cd2600, src=(nil)
result=MOV 101,#0

a format: assem=STR 's0,['d0,#-8]
, dst=0x55bb13cd2810, src=0x55bb13cd2670
result=STR 101,[FP,#-8]

a format: assem=MOV 'd0,#0
, dst=0x55bb13cd2bf0, src=(nil)
result=MOV 102,#0

a format: assem=STR 's0,['d0,#-4]
, dst=0x55bb13cd2e00, src=0x55bb13cd2c60
result=STR 102,[FP,#-4]

a format: assem=MOV 'd0,#0
, dst=0x55bb13cd31e0, src=(nil)
result=MOV 103,#0

a format: assem=STR 's0,['d0,#-16]
, dst=0x55bb13cd33f0, src=0x55bb13cd3250
result=STR 103,[FP,#-16]

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55bb13cd3b40, src=0x55bb13cd3b20
result=LDR 104,[FP,#-12]

a format: assem=MOV 'd0,#3
, dst=0x55bb13cd3da0, src=(nil)
result=MOV 105,#3

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55bb13cd3e30
result=CMP 104,105

a format: assem=BLT L15
, dst=(nil), src=(nil)
result=BLT L15

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=MOV 'd0,#0
, dst=0x55bb13cd4500, src=(nil)
result=MOV 106,#0

a format: assem=MOV 'd0, 's0
, dst=0x55bb13cd4590, src=0x55bb13cd4570
result=MOV RV, 106

a format: assem=B L16
, dst=(nil), src=(nil)
result=B L16

a format: assem=L15:
, dst=(nil), src=(nil)
result=L15:

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55bb13cd50a0, src=0x55bb13cd5080
result=LDR 107,[FP,#-8]

a format: assem=MOV 'd0,#3
, dst=0x55bb13cd5300, src=(nil)
result=MOV 108,#3

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55bb13cd5390
result=CMP 107,108

a format: assem=BLT L14
, dst=(nil), src=(nil)
result=BLT L14

a format: assem=B L5
, dst=(nil), src=(nil)
result=B L5

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55bb13cd5df0, src=0x55bb13cd5dd0
result=LDR 110,[FP,#-12]

a format: assem=ADD 'd0,'s0,1
, dst=0x55bb13cd5e80, src=0x55bb13cd5e60
result=ADD 109,110,1

a format: assem=STR 's0,['d0,#-12]
, dst=0x55bb13cd6090, src=0x55bb13cd5ef0
result=STR 109,[FP,#-12]

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L14:
, dst=(nil), src=(nil)
result=L14:

a format: assem=L10:
, dst=(nil), src=(nil)
result=L10:

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55bb13cd6ba0, src=0x55bb13cd6b80
result=LDR 111,[FP,#-4]

a format: assem=MOV 'd0,#3
, dst=0x55bb13cd6e00, src=(nil)
result=MOV 112,#3

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55bb13cd6e90
result=CMP 111,112

a format: assem=BLT L13
, dst=(nil), src=(nil)
result=BLT L13

a format: assem=B L9
, dst=(nil), src=(nil)
result=B L9

a format: assem=L9:
, dst=(nil), src=(nil)
result=L9:

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55bb13cd78f0, src=0x55bb13cd78d0
result=LDR 114,[FP,#-8]

a format: assem=ADD 'd0,'s0,1
, dst=0x55bb13cd7980, src=0x55bb13cd7960
result=ADD 113,114,1

a format: assem=STR 's0,['d0,#-8]
, dst=0x55bb13cd7b90, src=0x55bb13cd79f0
result=STR 113,[FP,#-8]

a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L13:
, dst=(nil), src=(nil)
result=L13:

a format: assem=MOV a,'d0
, dst=0x55bb13cd8970, src=(nil)
result=MOV a,119

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55bb13cd8f60, src=0x55bb13cd8f40
result=LDR 121,[FP,#-12]

a format: assem=MOV 'd0,#36
, dst=0x55bb13cd91c0, src=(nil)
result=MOV 122,#36

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cd9270, src=0x55bb13cd9250
result=MUL 120,121,122

BEGIN L0
L0:
MOV 100,#0
STR 100,[FP,#-12]
MOV 101,#0
STR 101,[FP,#-8]
MOV 102,#0
STR 102,[FP,#-4]
MOV 103,#0
STR 103,[FP,#-16]
L2:
LDR 104,[FP,#-12]
MOV 105,#3
CMP 104,105
BLT L15
B L1
L1:
MOV 106,#0
MOV RV, 106
B L16
L15:
L6:
LDR 107,[FP,#-8]
MOV 108,#3
CMP 107,108
BLT L14
B L5
L5:
LDR 110,[FP,#-12]
ADD 109,110,1
STR 109,[FP,#-12]
B L2
L14:
L10:
LDR 111,[FP,#-4]
MOV 112,#3
CMP 111,112
BLT L13
B L9
L9:
LDR 114,[FP,#-8]
ADD 113,114,1
STR 113,[FP,#-8]
B L6
L13:
MOV a,119
LDR 121,[FP,#-12]
MOV 122,#36
MUL 120,a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cd9320, src=0x55bb13cd9300
result=ADD 118,119,120

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55bb13cd9910, src=0x55bb13cd98f0
result=LDR 124,[FP,#-8]

a format: assem=MOV 'd0,#12
, dst=0x55bb13cd9b70, src=(nil)
result=MOV 125,#12

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cd9c20, src=0x55bb13cd9c00
result=MUL 123,124,125

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cd9cd0, src=0x55bb13cd9cb0
result=ADD 117,118,123

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55bb13cda2c0, src=0x55bb13cda2a0
result=LDR 127,[FP,#-4]

a format: assem=MOV 'd0,#4
, dst=0x55bb13cda520, src=(nil)
result=MOV 128,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cda5d0, src=0x55bb13cda5b0
result=MUL 126,127,128

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cda680, src=0x55bb13cda660
result=ADD 116,117,126

a format: assem=ADD 'd0,'s0,-16
, dst=0x55bb13cdaa80, src=0x55bb13cdaa60
result=ADD 129,FP,-16

a format: assem=LDR 'd0,['s0]
, dst=0x55bb13cdab10, src=0x55bb13cdaaf0
result=LDR 115,[129]

a format: assem=MOV a,'d0
, dst=0x55bb13cdb340, src=(nil)
result=MOV a,133

a format: assem=LDR 'd0,['s0,#-12]
, dst=0x55bb13cdb930, src=0x55bb13cdb910
result=LDR 135,[FP,#-12]

a format: assem=MOV 'd0,#36
, dst=0x55bb13cdbb90, src=(nil)
result=MOV 136,#36

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cdbc40, src=0x55bb13cdbc20
result=MUL 134,135,136

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cdbcf0, src=0x55bb13cdbcd0
result=ADD 132,133,134

a format: assem=LDR 'd0,['s0,#-8]
, dst=0x55bb13cdc2e0, src=0x55bb13cdc2c0
result=LDR 138,[FP,#-8]

a format: assem=MOV 'd0,#12
, dst=0x55bb13cdc540, src=(nil)
result=MOV 139,#12

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cdc5f0, src=0x55bb13cdc5d0
result=MUL 137,138,139

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cdc6a0, src=0x55bb13cdc680
result=ADD 131,132,137

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55bb13cdcc90, src=0x55bb13cdcc70
result=LDR 141,[FP,#-4]

a format: assem=MOV 'd0,#4
, dst=0x55bb13cdcef0, src=(nil)
result=MOV 142,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x55bb13cdcfa0, src=0x55bb13cdcf80
result=MUL 140,141,142

a format: assem=ADD 'd0,'s0,'s1
, dst=0x55bb13cdd050, src=0x55bb13cdd030
result=ADD 130,131,140

a format: assem=STR 's0,['s1]
, dst=(nil), src=0x55bb13cdd0e0
result=STR 115,[130]

a format: assem=LDR 'd0,['s0,#-16]
, dst=0x55bb13cdd850, src=0x55bb13cdd830
result=LDR 144,[FP,#-16]

a format: assem=ADD 'd0,'s0,1
, dst=0x55bb13cdd8e0, src=0x55bb13cdd8c0
result=ADD 143,144,1

a format: assem=STR 's0,['d0,#-16]
, dst=0x55bb13cddaf0, src=0x55bb13cdd950
result=STR 143,[FP,#-16]

a format: assem=LDR 'd0,['s0,#-4]
, dst=0x55bb13cde260, src=0x55bb13cde240
result=LDR 146,[FP,#-4]

a format: assem=ADD 'd0,'s0,1
, dst=0x55bb13cde2f0, src=0x55bb13cde2d0
result=ADD 145,146,1

a format: assem=STR 's0,['d0,#-4]
, dst=0x55bb13cde500, src=0x55bb13cde360
result=STR 145,[FP,#-4]

a format: assem=B L10
, dst=(nil), src=(nil)
result=B L10

a format: assem=L16:
, dst=(nil), src=(nil)
result=L16:

121,122
ADD 118,119,120
LDR 124,[FP,#-8]
MOV 125,#12
MUL 123,124,125
ADD 117,118,123
LDR 127,[FP,#-4]
MOV 128,#4
MUL 126,127,128
ADD 116,117,126
ADD 129,FP,-16
LDR 115,[129]
MOV a,133
LDR 135,[FP,#-12]
MOV 136,#36
MUL 134,135,136
ADD 132,133,134
LDR 138,[FP,#-8]
MOV 139,#12
MUL 137,138,139
ADD 131,132,137
LDR 141,[FP,#-4]
MOV 142,#4
MUL 140,141,142
ADD 130,131,140
STR 115,[130]
LDR 144,[FP,#-16]
ADD 143,144,1
STR 143,[FP,#-16]
LDR 146,[FP,#-4]
ADD 145,146,1
STR 145,[FP,#-4]
B L10
L16:

END L0

