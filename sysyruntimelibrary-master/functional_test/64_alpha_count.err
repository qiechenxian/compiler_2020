
before semantic ast:
 decList(
  functionDec(main,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       arrayDec(string,
        int,
        expList(
         intExp(500),
         expList()),
        FALSE),
       decList()),),
     comStmList(
      comStm(
       decList(
        variableDec(temp,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(i,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(count,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(count),
           intExp(0))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(i),
            intExp(0))),
          comStmList(
           comStm(
            assignStm(
             simpleVar(temp),
             intExp(0))),
           comStmList(
            comStm(
             whileStm(
              opExp(
               ne,
               varExp(
                simpleVar(temp)),
               intExp(10)),
              blockStm(
               comStmList(
                comStm(
                 assignStm(
                  simpleVar(temp),
                  callExp(getch,
                   expList()))),
                comStmList(
                 comStm(
                  ifStm(
                   opExp(
                    and,
                    opExp(
                     or,
                     opExp(
                      gt,
                      varExp(
                       simpleVar(temp)),
                      intExp(40)),
                     opExp(
                      lt,
                      varExp(
                       simpleVar(temp)),
                      intExp(91))),
                    opExp(
                     or,
                     opExp(
                      gt,
                      varExp(
                       simpleVar(temp)),
                      intExp(96)),
                     opExp(
                      lt,
                      varExp(
                       simpleVar(temp)),
                      intExp(123)))),
                   blockStm(
                    comStmList(
                     comStm(
                      assignStm(
                       simpleVar(count),
                       opExp(
                        add,
                        varExp(
                         simpleVar(count)),
                        intExp(1)))),
                     comStmList()))                   )),
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(i),
                    opExp(
                     add,
                     varExp(
                      simpleVar(i)),
                     intExp(1)))),
                  comStmList())))))
),
            comStmList(
             comStm(
              expStm(
               callExp(putint,
                expList(
                 varExp(
                  simpleVar(count)),
                 expList()))),
             comStmList(
              comStm(
               returnStm(
                intExp(0))),
              comStmList())))))))))))),
  decList())

after semantic ast:
 decList(
  functionDec(main,
   fieldList(),
   int,
   blockStm(
    comStmList(
     comStm(
      decList(
       arrayDec(string,
        int,
        expList(
         intExp(500),
         expList()),
        FALSE),
       decList()),),
     comStmList(
      comStm(
       decList(
        variableDec(temp,
         int,
         FALSE),
        decList()),),
      comStmList(
       comStm(
        decList(
         variableDec(i,
          int,
          FALSE),
         decList()),),
       comStmList(
        comStm(
         decList(
          variableDec(count,
           int,
           FALSE),
          decList()),),
        comStmList(
         comStm(
          assignStm(
           simpleVar(count),
           intExp(0))),
         comStmList(
          comStm(
           assignStm(
            simpleVar(i),
            intExp(0))),
          comStmList(
           comStm(
            assignStm(
             simpleVar(temp),
             intExp(0))),
           comStmList(
            comStm(
             whileStm(
              opExp(
               ne,
               varExp(
                simpleVar(temp)),
               intExp(10)),
              blockStm(
               comStmList(
                comStm(
                 assignStm(
                  simpleVar(temp),
                  callExp(getch,
                   expList()))),
                comStmList(
                 comStm(
                  ifStm(
                   opExp(
                    and,
                    opExp(
                     or,
                     opExp(
                      gt,
                      varExp(
                       simpleVar(temp)),
                      intExp(40)),
                     opExp(
                      lt,
                      varExp(
                       simpleVar(temp)),
                      intExp(91))),
                    opExp(
                     or,
                     opExp(
                      gt,
                      varExp(
                       simpleVar(temp)),
                      intExp(96)),
                     opExp(
                      lt,
                      varExp(
                       simpleVar(temp)),
                      intExp(123)))),
                   blockStm(
                    comStmList(
                     comStm(
                      assignStm(
                       simpleVar(count),
                       opExp(
                        add,
                        varExp(
                         simpleVar(count)),
                        intExp(1)))),
                     comStmList()))                   )),
                 comStmList(
                  comStm(
                   assignStm(
                    simpleVar(i),
                    opExp(
                     add,
                     varExp(
                      simpleVar(i)),
                     intExp(1)))),
                  comStmList())))))
),
            comStmList(
             comStm(
              expStm(
               callExp(putint,
                expList(
                 varExp(
                  simpleVar(count)),
                 expList()))),
             comStmList(
              comStm(
               returnStm(
                intExp(0))),
              comStmList())))))))))))),
  decList())
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L0,
  SEQ(
   SEQ(
    SEQ(
     SEQ(
      SEQ(
       SEQ(
        SEQ(
         SEQ(
          SEQ(
           EXP(
            CONST 0),
           EXP(
            CONST 0)),
          EXP(
           CONST 0)),
         EXP(
          CONST 0)),
        MOVE(
         MEM(
          BINOP(T_add,
           TEMP tFP,
           CONST -2012)),
         CONST 0)),
       MOVE(
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -2008)),
        CONST 0)),
      MOVE(
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -2004)),
       CONST 0)),
     SEQ(
      LABEL L2,
      SEQ(
       CJUMP(T_ne,
        MEM(
         BINOP(T_add,
          TEMP tFP,
          CONST -2004)),
        CONST 10,
        L10,L1),
       SEQ(
        LABEL L10,
        SEQ(
         SEQ(
          SEQ(
           MOVE(
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -2004)),
            CALL(
             NAME getch,
              TEMP tFP)),
           SEQ(
            SEQ(
             SEQ(
              SEQ(
               CJUMP(T_gt,
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -2004)),
                CONST 40,
                L7,L5),
               SEQ(
                LABEL L5,
                CJUMP(T_lt,
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -2004)),
                 CONST 91,
                 L7,L9))),
              SEQ(
               LABEL L7,
               SEQ(
                CJUMP(T_gt,
                 MEM(
                  BINOP(T_add,
                   TEMP tFP,
                   CONST -2004)),
                 CONST 96,
                 L8,L6),
                SEQ(
                 LABEL L6,
                 CJUMP(T_lt,
                  MEM(
                   BINOP(T_add,
                    TEMP tFP,
                    CONST -2004)),
                  CONST 123,
                  L8,L9))))),
             SEQ(
              LABEL L8,
              MOVE(
               MEM(
                BINOP(T_add,
                 TEMP tFP,
                 CONST -2012)),
               BINOP(T_add,
                MEM(
                 BINOP(T_add,
                  TEMP tFP,
                  CONST -2012)),
                CONST 1)))),
            LABEL L9)),
          MOVE(
           MEM(
            BINOP(T_add,
             TEMP tFP,
             CONST -2008)),
           BINOP(T_add,
            MEM(
             BINOP(T_add,
              TEMP tFP,
              CONST -2008)),
            CONST 1))),
         SEQ(
          JUMP(
           NAME L2),
          LABEL L1)))))),
    EXP(
     CALL(
      NAME putint,
       TEMP tFP,
       MEM(
        BINOP(T_add,
         TEMP tFP,
         CONST -2012))))),
   MOVE(
    TEMP tRV,
    CONST 0)))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2012)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2008)),
  CONST 0)
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 0)
----dived line----
 LABEL L2
----dived line----
 CJUMP(T_ne,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 10,
  L10,L1)
----dived line----
 LABEL L1
----dived line----
 EXP(
  CALL(
   NAME putint,
    TEMP tFP,
    MEM(
     BINOP(T_add,
      TEMP tFP,
      CONST -2012))))
----dived line----
 MOVE(
  TEMP tRV,
  CONST 0)
----dived line----
 JUMP(
  NAME L11)
----dived line----
 LABEL L10
----dived line----
 MOVE(
  TEMP t102,
  BINOP(T_add,
   TEMP tFP,
   CONST -2004))
----dived line----
 MOVE(
  TEMP t101,
  CALL(
   NAME getch,
    TEMP tFP))
----dived line----
 MOVE(
  MEM(
   TEMP t102),
  TEMP t101)
----dived line----
 CJUMP(T_gt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 40,
  L7,L5)
----dived line----
 LABEL L5
----dived line----
 CJUMP(T_lt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 91,
  L7,L9)
----dived line----
 LABEL L9
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2008)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -2008)),
   CONST 1))
----dived line----
 JUMP(
  NAME L2)
----dived line----
 LABEL L7
----dived line----
 CJUMP(T_gt,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 96,
  L8,L6)
----dived line----
 LABEL L6
----dived line----
 CJUMP(T_ge,
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2004)),
  CONST 123,
  L9,L8)
----dived line----
 LABEL L8
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    TEMP tFP,
    CONST -2012)),
  BINOP(T_add,
   MEM(
    BINOP(T_add,
     TEMP tFP,
     CONST -2012)),
   CONST 1))
----dived line----
 JUMP(
  NAME L9)
----dived line----
 LABEL L11
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#0
, dst=0x55eade547e40, src=(nil)
result=MOV 103,#0

a format: assem=STR 's0,['d0,#-2012]
, dst=0x55eade548050, src=0x55eade547eb0
result=STR 103,[FP,#-2012]

a format: assem=MOV 'd0,#0
, dst=0x55eade548430, src=(nil)
result=MOV 104,#0

a format: assem=STR 's0,['d0,#-2008]
, dst=0x55eade548640, src=0x55eade5484a0
result=STR 104,[FP,#-2008]

a format: assem=MOV 'd0,#0
, dst=0x55eade548a20, src=(nil)
result=MOV 105,#0

a format: assem=STR 's0,['d0,#-2004]
, dst=0x55eade548c30, src=0x55eade548a90
result=STR 105,[FP,#-2004]

a format: assem=L2:
, dst=(nil), src=(nil)
result=L2:

a format: assem=LDR 'd0,['s0,#-2004]
, dst=0x55eade549380, src=0x55eade549360
result=LDR 106,[FP,#-2004]

a format: assem=MOV 'd0,#10
, dst=0x55eade5495e0, src=(nil)
result=MOV 107,#10

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55eade549670
result=CMP 106,107

a format: assem=BNE L10
, dst=(nil), src=(nil)
result=BNE L10

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

a format: assem=BL putint
, dst=(nil), src=(nil)
result=BL putint

a format: assem=MOV 'd0,#0
, dst=0x55eade549f50, src=(nil)
result=MOV 108,#0

a format: assem=MOV 'd0, 's0
, dst=0x55eade549fe0, src=0x55eade549fc0
result=MOV RV, 108

a format: assem=B L11
, dst=(nil), src=(nil)
result=B L11

a format: assem=L10:
, dst=(nil), src=(nil)
result=L10:

a format: assem=ADD 'd0,'s0,-2004
, dst=0x55eade54a920, src=0x55eade54a900
result=ADD 109,FP,-2004

a format: assem=MOV 'd0, 's0
, dst=0x55eade54a9b0, src=0x55eade54a990
result=MOV 102, 109

a format: assem=BL getch
, dst=0x55eade54ac50, src=(nil)
result=BL getch

a format: assem=MOV `d0, `s0
, dst=0x55eade54ace0, src=0x55eade54acc0
result=MOV `d0, `s0

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x55eade54b1f0
result=STR 101,[102]

a format: assem=LDR 'd0,['s0,#-2004]
, dst=0x55eade54b770, src=0x55eade54b750
result=LDR 111,[FP,#-2004]

a format: assem=MOV 'd0,#40
, dst=0x55eade54b9d0, src=(nil)
result=MOV 112,#40

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55eade54ba60
result=CMP 111,112

a format: assem=BGT L7
, dst=(nil), src=(nil)
result=BGT L7

a format: assem=B L5
, dst=(nil), src=(nil)
result=B L5

a format: assem=L5:
, dst=(nil), src=(nil)
result=L5:

a format: assem=LDR 'd0,['s0,#-2004]
, dst=0x55eade54c2d0, src=0x55eade54c2b0
result=LDR 113,[FP,#-2004]

a format: assem=MOV 'd0,#91
, dst=0x55eade54c530, src=(nil)
result=MOV 114,#91

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55eade54c5c0
result=CMP 113,114

a format: assem=BLT L7
, dst=(nil), src=(nil)
result=BLT L7

a format: assem=B L9
, dst=(nil), src=(nil)
result=B L9

a format: assem=L9:
, dst=(nil), src=(nil)
result=L9:

a format: assem=LDR 'd0,['s0,#-2008]
, dst=0x55eade54d020, src=0x55eade54d000
result=LDR 116,[FP,#-2008]

a format: assem=ADD 'd0,'s0,1
, dst=0x55eade54d0b0, src=0x55eade54d090
result=ADD 115,116,1

a format: assem=STR 's0,['d0,#-2008]
, dst=0x55eade54d2c0, src=0x55eade54d120
result=STR 115,[FP,#-2008]

a format: assem=B L2
, dst=(nil), src=(nil)
result=B L2

a format: assem=L7:
, dst=(nil), src=(nil)
result=L7:

a format: assem=LDR 'd0,['s0,#-2004]
, dst=0x55eade54dc00, src=0x55eade54dbe0
result=LDR 117,[FP,#-2004]

a format: assem=MOV 'd0,#96
, dst=0x55eade54de60, src=(nil)
result=MOV 118,#96

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55eade54def0
result=CMP 117,118

a format: assem=BGT L8
, dst=(nil), src=(nil)
result=BGT L8

BEGIN L0
L0:
MOV 103,#0
STR 103,[FP,#-2012]
MOV 104,#0
STR 104,[FP,#-2008]
MOV 105,#0
STR 105,[FP,#-2004]
L2:
LDR 106,[FP,#-2004]
MOV 107,#10
CMP 106,107
BNE L10
B L1
L1:
BL putint
MOV 108,#0
MOV RV, 108
B L11
L10:
ADD 109,FP,-2004
MOV 102, 109
BL getch
MOV `d0, `s0
STR 101,[102]
LDR 111,[FP,#-2004]
MOV 112,#40
CMP 111,112
BGT L7
B L5
L5:
LDR 113,[FP,#-2004]
MOV 114,#91
CMP 113,114
BLT L7
B L9
L9:
LDR 116,[FP,#-2008]
ADD 115,116,1
STR 115,[FP,#-2008]
B L2
L7:
LDR 117,[FP,#-2004]
MOV 118,#96
CMP 117,118
BGT a format: assem=B L6
, dst=(nil), src=(nil)
result=B L6

a format: assem=L6:
, dst=(nil), src=(nil)
result=L6:

a format: assem=LDR 'd0,['s0,#-2004]
, dst=0x55eade54e760, src=0x55eade54e740
result=LDR 119,[FP,#-2004]

a format: assem=MOV 'd0,#123
, dst=0x55eade54e9c0, src=(nil)
result=MOV 120,#123

a format: assem=CMP 's0,'s1
, dst=(nil), src=0x55eade54ea50
result=CMP 119,120

a format: assem=BGE L9
, dst=(nil), src=(nil)
result=BGE L9

a format: assem=B L8
, dst=(nil), src=(nil)
result=B L8

a format: assem=L8:
, dst=(nil), src=(nil)
result=L8:

a format: assem=LDR 'd0,['s0,#-2012]
, dst=0x55eade54f4b0, src=0x55eade54f490
result=LDR 122,[FP,#-2012]

a format: assem=ADD 'd0,'s0,1
, dst=0x55eade54f540, src=0x55eade54f520
result=ADD 121,122,1

a format: assem=STR 's0,['d0,#-2012]
, dst=0x55eade54f750, src=0x55eade54f5b0
result=STR 121,[FP,#-2012]

a format: assem=B L9
, dst=(nil), src=(nil)
result=B L9

a format: assem=L11:
, dst=(nil), src=(nil)
result=L11:

L8
B L6
L6:
LDR 119,[FP,#-2004]
MOV 120,#123
CMP 119,120
BGE L9
B L8
L8:
LDR 122,[FP,#-2012]
ADD 121,122,1
STR 121,[FP,#-2012]
B L9
L11:

END L0

