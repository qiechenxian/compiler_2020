
before semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(10),
    expList()),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       assignStm(
        arrayVar(
         simpleVar(a),
         intExp(0)),
        intExp(1))),
      comStmList(
       comStm(
        returnStm(
         intExp(0))),
       comStmList())))),
   decList()))

after semantic ast:
 decList(
  arrayDec(a,
   int,
   expList(
    intExp(10),
    expList()),
   FALSE),
  decList(
   functionDec(main,
    fieldList(),
    int,
    blockStm(
     comStmList(
      comStm(
       assignStm(
        arrayVar(
         simpleVar(a),
         intExp(0)),
        intExp(1))),
      comStmList(
       comStm(
        returnStm(
         intExp(0))),
       comStmList())))),
   decList()))
semantic check finish !

↓---------------IR TREE BEFORE CANNO PRINTF START---------------↓
 SEQ(
  LABEL L0,
  SEQ(
   MOVE(
    MEM(
     BINOP(T_add,
      NAME a,
      BINOP(T_mul,
       CONST 0,
       CONST 4))),
    CONST 1),
   MOVE(
    TEMP tRV,
    CONST 0)))
↑---------------IR TREE BEFORE CANNO PRINTF OVER---------------↑

↓---------------IR TREE AFTER CANNO PRINTF START---------------↓
 LABEL L0
----dived line----
 MOVE(
  MEM(
   BINOP(T_add,
    NAME a,
    BINOP(T_mul,
     CONST 0,
     CONST 4))),
  CONST 1)
----dived line----
 MOVE(
  TEMP tRV,
  CONST 0)
----dived line----
 JUMP(
  NAME L1)
----dived line----
 LABEL L1
----dived line----

↑---------------IR TREE AFTER CANNO PRINTF OVER---------------↑
a format: assem=L0:
, dst=(nil), src=(nil)
result=L0:

a format: assem=MOV 'd0,#1
, dst=0x558dd5761ec0, src=(nil)
result=MOV 100,#1

a format: assem=MOV a,'d0
, dst=0x558dd5762330, src=(nil)
result=MOV a,102

a format: assem=MOV 'd0,#0
, dst=0x558dd5762780, src=(nil)
result=MOV 104,#0

a format: assem=MOV 'd0,#4
, dst=0x558dd57629e0, src=(nil)
result=MOV 105,#4

a format: assem=MUL 'd0,'s0,'s1
, dst=0x558dd5762a90, src=0x558dd5762a70
result=MUL 103,104,105

a format: assem=ADD 'd0,'s0,'s1
, dst=0x558dd5762b40, src=0x558dd5762b20
result=ADD 101,102,103

a format: assem=STR 's1,['s0]
, dst=(nil), src=0x558dd5762bb0
result=STR 100,[101]

a format: assem=MOV 'd0,#0
, dst=0x558dd5762f90, src=(nil)
result=MOV 106,#0

a format: assem=MOV 'd0, 's0
, dst=0x558dd5763020, src=0x558dd5763000
result=MOV RV, 106

a format: assem=B L1
, dst=(nil), src=(nil)
result=B L1

a format: assem=L1:
, dst=(nil), src=(nil)
result=L1:

BEGIN L0
L0:
MOV 100,#1
MOV a,102
MOV 104,#0
MOV 105,#4
MUL 103,104,105
ADD 101,102,103
STR 100,[101]
MOV 106,#0
MOV RV, 106
B L1
L1:

END L0

